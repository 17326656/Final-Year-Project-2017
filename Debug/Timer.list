
G:\All\Skripsie Bigger\Skripsie\Dual_Channel_Pulse_Count_Implementation_b\Debug\Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f6c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800316c  0800316c  0001316c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080031cc  080031cc  000131cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080031d0  080031d0  000131d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  20000000  080031d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001b0  20000088  0800325c  00020088  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000238  0800325c  00020238  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015103  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002205  00000000  00000000  000351b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000835c  00000000  00000000  000373be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000aa0  00000000  00000000  0003f720  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a28  00000000  00000000  000401c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00027346  00000000  00000000  00040be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008ad3  00000000  00000000  00067f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000f0849  00000000  00000000  00070a01  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0016124a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001f6c  00000000  00000000  001612c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000088 	.word	0x20000088
 800021c:	00000000 	.word	0x00000000
 8000220:	08003154 	.word	0x08003154

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000008c 	.word	0x2000008c
 800023c:	08003154 	.word	0x08003154

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002e0:	b510      	push	{r4, lr}
 80002e2:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80002e4:	4b07      	ldr	r3, [pc, #28]	; (8000304 <HAL_InitTick+0x24>)
 80002e6:	6818      	ldr	r0, [r3, #0]
 80002e8:	4b07      	ldr	r3, [pc, #28]	; (8000308 <HAL_InitTick+0x28>)
 80002ea:	fba3 3000 	umull	r3, r0, r3, r0
 80002ee:	0980      	lsrs	r0, r0, #6
 80002f0:	f000 f882 	bl	80003f8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80002f4:	2200      	movs	r2, #0
 80002f6:	4621      	mov	r1, r4
 80002f8:	f04f 30ff 	mov.w	r0, #4294967295
 80002fc:	f000 f840 	bl	8000380 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000300:	2000      	movs	r0, #0
 8000302:	bd10      	pop	{r4, pc}
 8000304:	20000020 	.word	0x20000020
 8000308:	10624dd3 	.word	0x10624dd3

0800030c <HAL_Init>:
{
 800030c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800030e:	2003      	movs	r0, #3
 8000310:	f000 f824 	bl	800035c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000314:	2000      	movs	r0, #0
 8000316:	f7ff ffe3 	bl	80002e0 <HAL_InitTick>
  HAL_MspInit();
 800031a:	f002 f993 	bl	8002644 <HAL_MspInit>
}
 800031e:	2000      	movs	r0, #0
 8000320:	bd08      	pop	{r3, pc}
	...

08000324 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000324:	4a02      	ldr	r2, [pc, #8]	; (8000330 <HAL_IncTick+0xc>)
 8000326:	6813      	ldr	r3, [r2, #0]
 8000328:	3301      	adds	r3, #1
 800032a:	6013      	str	r3, [r2, #0]
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	200000d8 	.word	0x200000d8

08000334 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000334:	4b01      	ldr	r3, [pc, #4]	; (800033c <HAL_GetTick+0x8>)
 8000336:	6818      	ldr	r0, [r3, #0]
}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	200000d8 	.word	0x200000d8

08000340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000340:	b510      	push	{r4, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000346:	f7ff fff5 	bl	8000334 <HAL_GetTick>
 800034a:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800034c:	f7ff fff2 	bl	8000334 <HAL_GetTick>
 8000350:	1b00      	subs	r0, r0, r4
 8000352:	9b01      	ldr	r3, [sp, #4]
 8000354:	4298      	cmp	r0, r3
 8000356:	d3f9      	bcc.n	800034c <HAL_Delay+0xc>
  {
  }
}
 8000358:	b002      	add	sp, #8
 800035a:	bd10      	pop	{r4, pc}

0800035c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800035c:	4906      	ldr	r1, [pc, #24]	; (8000378 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800035e:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000360:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000364:	041b      	lsls	r3, r3, #16
 8000366:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000368:	0200      	lsls	r0, r0, #8
 800036a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800036e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000370:	4a02      	ldr	r2, [pc, #8]	; (800037c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000372:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000374:	60ca      	str	r2, [r1, #12]
 8000376:	4770      	bx	lr
 8000378:	e000ed00 	.word	0xe000ed00
 800037c:	05fa0000 	.word	0x05fa0000

08000380 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000380:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <HAL_NVIC_SetPriority+0x54>)
 8000384:	68db      	ldr	r3, [r3, #12]
 8000386:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800038a:	f1c3 0407 	rsb	r4, r3, #7
 800038e:	2c04      	cmp	r4, #4
 8000390:	bf28      	it	cs
 8000392:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000394:	1d1d      	adds	r5, r3, #4
 8000396:	2d06      	cmp	r5, #6
 8000398:	d913      	bls.n	80003c2 <HAL_NVIC_SetPriority+0x42>
 800039a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800039c:	2501      	movs	r5, #1
 800039e:	fa05 f404 	lsl.w	r4, r5, r4
 80003a2:	3c01      	subs	r4, #1
 80003a4:	4021      	ands	r1, r4
 80003a6:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003a8:	fa05 f303 	lsl.w	r3, r5, r3
 80003ac:	3b01      	subs	r3, #1
 80003ae:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003b0:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80003b2:	2800      	cmp	r0, #0
 80003b4:	db07      	blt.n	80003c6 <HAL_NVIC_SetPriority+0x46>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b6:	0109      	lsls	r1, r1, #4
 80003b8:	b2c9      	uxtb	r1, r1
 80003ba:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <HAL_NVIC_SetPriority+0x58>)
 80003bc:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80003be:	bc30      	pop	{r4, r5}
 80003c0:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003c2:	2300      	movs	r3, #0
 80003c4:	e7ea      	b.n	800039c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c6:	f000 000f 	and.w	r0, r0, #15
 80003ca:	0109      	lsls	r1, r1, #4
 80003cc:	b2c9      	uxtb	r1, r1
 80003ce:	4b03      	ldr	r3, [pc, #12]	; (80003dc <HAL_NVIC_SetPriority+0x5c>)
 80003d0:	5419      	strb	r1, [r3, r0]
 80003d2:	e7f4      	b.n	80003be <HAL_NVIC_SetPriority+0x3e>
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	e000e400 	.word	0xe000e400
 80003dc:	e000ed14 	.word	0xe000ed14

080003e0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003e0:	0942      	lsrs	r2, r0, #5
 80003e2:	f000 001f 	and.w	r0, r0, #31
 80003e6:	2301      	movs	r3, #1
 80003e8:	fa03 f000 	lsl.w	r0, r3, r0
 80003ec:	4b01      	ldr	r3, [pc, #4]	; (80003f4 <HAL_NVIC_EnableIRQ+0x14>)
 80003ee:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80003f2:	4770      	bx	lr
 80003f4:	e000e100 	.word	0xe000e100

080003f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003f8:	3801      	subs	r0, #1
 80003fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003fe:	d20a      	bcs.n	8000416 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <HAL_SYSTICK_Config+0x24>)
 8000402:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000404:	21f0      	movs	r1, #240	; 0xf0
 8000406:	4a06      	ldr	r2, [pc, #24]	; (8000420 <HAL_SYSTICK_Config+0x28>)
 8000408:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800040c:	2000      	movs	r0, #0
 800040e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000410:	2207      	movs	r2, #7
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000416:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	e000e010 	.word	0xe000e010
 8000420:	e000ed00 	.word	0xe000ed00

08000424 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000424:	2804      	cmp	r0, #4
 8000426:	d005      	beq.n	8000434 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000428:	4a05      	ldr	r2, [pc, #20]	; (8000440 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800042a:	6813      	ldr	r3, [r2, #0]
 800042c:	f023 0304 	bic.w	r3, r3, #4
 8000430:	6013      	str	r3, [r2, #0]
 8000432:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000434:	4a02      	ldr	r2, [pc, #8]	; (8000440 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000436:	6813      	ldr	r3, [r2, #0]
 8000438:	f043 0304 	orr.w	r3, r3, #4
 800043c:	6013      	str	r3, [r2, #0]
 800043e:	4770      	bx	lr
 8000440:	e000e010 	.word	0xe000e010

08000444 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000444:	4770      	bx	lr

08000446 <HAL_SYSTICK_IRQHandler>:
{
 8000446:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000448:	f7ff fffc 	bl	8000444 <HAL_SYSTICK_Callback>
 800044c:	bd08      	pop	{r3, pc}
	...

08000450 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000452:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000454:	2400      	movs	r4, #0
 8000456:	e037      	b.n	80004c8 <HAL_GPIO_Init+0x78>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000458:	2609      	movs	r6, #9
 800045a:	e000      	b.n	800045e <HAL_GPIO_Init+0xe>
 800045c:	2600      	movs	r6, #0
 800045e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000462:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8000464:	3302      	adds	r3, #2
 8000466:	4e6c      	ldr	r6, [pc, #432]	; (8000618 <HAL_GPIO_Init+0x1c8>)
 8000468:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800046c:	4b6b      	ldr	r3, [pc, #428]	; (800061c <HAL_GPIO_Init+0x1cc>)
 800046e:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8000470:	43eb      	mvns	r3, r5
 8000472:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000476:	684f      	ldr	r7, [r1, #4]
 8000478:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800047c:	d001      	beq.n	8000482 <HAL_GPIO_Init+0x32>
        {
          temp |= iocurrent;
 800047e:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8000482:	4a66      	ldr	r2, [pc, #408]	; (800061c <HAL_GPIO_Init+0x1cc>)
 8000484:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000486:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000488:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800048c:	684f      	ldr	r7, [r1, #4]
 800048e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000492:	d001      	beq.n	8000498 <HAL_GPIO_Init+0x48>
        {
          temp |= iocurrent;
 8000494:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8000498:	4a60      	ldr	r2, [pc, #384]	; (800061c <HAL_GPIO_Init+0x1cc>)
 800049a:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800049c:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800049e:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004a2:	684f      	ldr	r7, [r1, #4]
 80004a4:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80004a8:	d001      	beq.n	80004ae <HAL_GPIO_Init+0x5e>
        {
          temp |= iocurrent;
 80004aa:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 80004ae:	4a5b      	ldr	r2, [pc, #364]	; (800061c <HAL_GPIO_Init+0x1cc>)
 80004b0:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80004b2:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80004b4:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004b6:	684e      	ldr	r6, [r1, #4]
 80004b8:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80004bc:	d001      	beq.n	80004c2 <HAL_GPIO_Init+0x72>
        {
          temp |= iocurrent;
 80004be:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 80004c2:	4a56      	ldr	r2, [pc, #344]	; (800061c <HAL_GPIO_Init+0x1cc>)
 80004c4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80004c6:	3401      	adds	r4, #1
 80004c8:	2c0f      	cmp	r4, #15
 80004ca:	f200 80a3 	bhi.w	8000614 <HAL_GPIO_Init+0x1c4>
    ioposition = ((uint32_t)0x01) << position;
 80004ce:	2301      	movs	r3, #1
 80004d0:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004d2:	680a      	ldr	r2, [r1, #0]
 80004d4:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 80004d8:	42ab      	cmp	r3, r5
 80004da:	d1f4      	bne.n	80004c6 <HAL_GPIO_Init+0x76>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004dc:	684a      	ldr	r2, [r1, #4]
 80004de:	2a12      	cmp	r2, #18
 80004e0:	bf18      	it	ne
 80004e2:	2a02      	cmpne	r2, #2
 80004e4:	d112      	bne.n	800050c <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 80004e6:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 80004ea:	f10e 0e08 	add.w	lr, lr, #8
 80004ee:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80004f2:	f004 0607 	and.w	r6, r4, #7
 80004f6:	00b6      	lsls	r6, r6, #2
 80004f8:	270f      	movs	r7, #15
 80004fa:	40b7      	lsls	r7, r6
 80004fc:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000500:	690f      	ldr	r7, [r1, #16]
 8000502:	fa07 f606 	lsl.w	r6, r7, r6
 8000506:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3] = temp;
 8000508:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
      temp = GPIOx->MODER;
 800050c:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800050e:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8000512:	2203      	movs	r2, #3
 8000514:	fa02 f20e 	lsl.w	r2, r2, lr
 8000518:	43d2      	mvns	r2, r2
 800051a:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800051c:	684f      	ldr	r7, [r1, #4]
 800051e:	f007 0703 	and.w	r7, r7, #3
 8000522:	fa07 f70e 	lsl.w	r7, r7, lr
 8000526:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000528:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800052a:	684e      	ldr	r6, [r1, #4]
 800052c:	1e77      	subs	r7, r6, #1
 800052e:	2e11      	cmp	r6, #17
 8000530:	bf18      	it	ne
 8000532:	2f01      	cmpne	r7, #1
 8000534:	d901      	bls.n	800053a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000536:	2e12      	cmp	r6, #18
 8000538:	d10f      	bne.n	800055a <HAL_GPIO_Init+0x10a>
        temp = GPIOx->OSPEEDR; 
 800053a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800053c:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 800053e:	68cf      	ldr	r7, [r1, #12]
 8000540:	fa07 f70e 	lsl.w	r7, r7, lr
 8000544:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000546:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000548:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800054a:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800054e:	684e      	ldr	r6, [r1, #4]
 8000550:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8000554:	40a6      	lsls	r6, r4
 8000556:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8000558:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 800055a:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800055c:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800055e:	688b      	ldr	r3, [r1, #8]
 8000560:	fa03 f30e 	lsl.w	r3, r3, lr
 8000564:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 8000566:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000568:	684b      	ldr	r3, [r1, #4]
 800056a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800056e:	d0aa      	beq.n	80004c6 <HAL_GPIO_Init+0x76>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000570:	4b2b      	ldr	r3, [pc, #172]	; (8000620 <HAL_GPIO_Init+0x1d0>)
 8000572:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000574:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000578:	645a      	str	r2, [r3, #68]	; 0x44
 800057a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800057c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000584:	08a3      	lsrs	r3, r4, #2
 8000586:	1c9e      	adds	r6, r3, #2
 8000588:	4a23      	ldr	r2, [pc, #140]	; (8000618 <HAL_GPIO_Init+0x1c8>)
 800058a:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800058e:	f004 0603 	and.w	r6, r4, #3
 8000592:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8000596:	260f      	movs	r6, #15
 8000598:	fa06 f60e 	lsl.w	r6, r6, lr
 800059c:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80005a0:	4f20      	ldr	r7, [pc, #128]	; (8000624 <HAL_GPIO_Init+0x1d4>)
 80005a2:	42b8      	cmp	r0, r7
 80005a4:	f43f af5a 	beq.w	800045c <HAL_GPIO_Init+0xc>
 80005a8:	4e1f      	ldr	r6, [pc, #124]	; (8000628 <HAL_GPIO_Init+0x1d8>)
 80005aa:	42b0      	cmp	r0, r6
 80005ac:	d022      	beq.n	80005f4 <HAL_GPIO_Init+0x1a4>
 80005ae:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80005b2:	42b0      	cmp	r0, r6
 80005b4:	d020      	beq.n	80005f8 <HAL_GPIO_Init+0x1a8>
 80005b6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80005ba:	42b0      	cmp	r0, r6
 80005bc:	d01e      	beq.n	80005fc <HAL_GPIO_Init+0x1ac>
 80005be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80005c2:	42b0      	cmp	r0, r6
 80005c4:	d01c      	beq.n	8000600 <HAL_GPIO_Init+0x1b0>
 80005c6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80005ca:	42b0      	cmp	r0, r6
 80005cc:	d01a      	beq.n	8000604 <HAL_GPIO_Init+0x1b4>
 80005ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80005d2:	42b0      	cmp	r0, r6
 80005d4:	d018      	beq.n	8000608 <HAL_GPIO_Init+0x1b8>
 80005d6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80005da:	42b0      	cmp	r0, r6
 80005dc:	d016      	beq.n	800060c <HAL_GPIO_Init+0x1bc>
 80005de:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80005e2:	42b0      	cmp	r0, r6
 80005e4:	d014      	beq.n	8000610 <HAL_GPIO_Init+0x1c0>
 80005e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80005ea:	42b0      	cmp	r0, r6
 80005ec:	f43f af34 	beq.w	8000458 <HAL_GPIO_Init+0x8>
 80005f0:	260a      	movs	r6, #10
 80005f2:	e734      	b.n	800045e <HAL_GPIO_Init+0xe>
 80005f4:	2601      	movs	r6, #1
 80005f6:	e732      	b.n	800045e <HAL_GPIO_Init+0xe>
 80005f8:	2602      	movs	r6, #2
 80005fa:	e730      	b.n	800045e <HAL_GPIO_Init+0xe>
 80005fc:	2603      	movs	r6, #3
 80005fe:	e72e      	b.n	800045e <HAL_GPIO_Init+0xe>
 8000600:	2604      	movs	r6, #4
 8000602:	e72c      	b.n	800045e <HAL_GPIO_Init+0xe>
 8000604:	2605      	movs	r6, #5
 8000606:	e72a      	b.n	800045e <HAL_GPIO_Init+0xe>
 8000608:	2606      	movs	r6, #6
 800060a:	e728      	b.n	800045e <HAL_GPIO_Init+0xe>
 800060c:	2607      	movs	r6, #7
 800060e:	e726      	b.n	800045e <HAL_GPIO_Init+0xe>
 8000610:	2608      	movs	r6, #8
 8000612:	e724      	b.n	800045e <HAL_GPIO_Init+0xe>
      }
    }
  }
}
 8000614:	b003      	add	sp, #12
 8000616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000618:	40013800 	.word	0x40013800
 800061c:	40013c00 	.word	0x40013c00
 8000620:	40023800 	.word	0x40023800
 8000624:	40020000 	.word	0x40020000
 8000628:	40020400 	.word	0x40020400

0800062c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800062c:	b912      	cbnz	r2, 8000634 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800062e:	0409      	lsls	r1, r1, #16
 8000630:	6181      	str	r1, [r0, #24]
 8000632:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000634:	6181      	str	r1, [r0, #24]
 8000636:	4770      	bx	lr

08000638 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000638:	6943      	ldr	r3, [r0, #20]
 800063a:	4059      	eors	r1, r3
 800063c:	6141      	str	r1, [r0, #20]
 800063e:	4770      	bx	lr

08000640 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000640:	b510      	push	{r4, lr}
 8000642:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <HAL_PWREx_EnableOverDrive+0x74>)
 8000646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000648:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800064c:	641a      	str	r2, [r3, #64]	; 0x40
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000658:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <HAL_PWREx_EnableOverDrive+0x78>)
 800065a:	6813      	ldr	r3, [r2, #0]
 800065c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000660:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000662:	f7ff fe67 	bl	8000334 <HAL_GetTick>
 8000666:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <HAL_PWREx_EnableOverDrive+0x78>)
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000670:	d108      	bne.n	8000684 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000672:	f7ff fe5f 	bl	8000334 <HAL_GetTick>
 8000676:	1b00      	subs	r0, r0, r4
 8000678:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800067c:	d9f4      	bls.n	8000668 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 800067e:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8000680:	b002      	add	sp, #8
 8000682:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000684:	4a0c      	ldr	r2, [pc, #48]	; (80006b8 <HAL_PWREx_EnableOverDrive+0x78>)
 8000686:	6813      	ldr	r3, [r2, #0]
 8000688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800068e:	f7ff fe51 	bl	8000334 <HAL_GetTick>
 8000692:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <HAL_PWREx_EnableOverDrive+0x78>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800069c:	d107      	bne.n	80006ae <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800069e:	f7ff fe49 	bl	8000334 <HAL_GetTick>
 80006a2:	1b00      	subs	r0, r0, r4
 80006a4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80006a8:	d9f4      	bls.n	8000694 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 80006aa:	2003      	movs	r0, #3
 80006ac:	e7e8      	b.n	8000680 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 80006ae:	2000      	movs	r0, #0
 80006b0:	e7e6      	b.n	8000680 <HAL_PWREx_EnableOverDrive+0x40>
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80006bc:	b570      	push	{r4, r5, r6, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006c2:	6803      	ldr	r3, [r0, #0]
 80006c4:	f013 0f01 	tst.w	r3, #1
 80006c8:	d03a      	beq.n	8000740 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80006ca:	4baa      	ldr	r3, [pc, #680]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 80006cc:	689b      	ldr	r3, [r3, #8]
 80006ce:	f003 030c 	and.w	r3, r3, #12
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	d02b      	beq.n	800072e <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80006d6:	4ba7      	ldr	r3, [pc, #668]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	f003 030c 	and.w	r3, r3, #12
 80006de:	2b08      	cmp	r3, #8
 80006e0:	d020      	beq.n	8000724 <HAL_RCC_OscConfig+0x68>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006e2:	6863      	ldr	r3, [r4, #4]
 80006e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006e8:	d051      	beq.n	800078e <HAL_RCC_OscConfig+0xd2>
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d155      	bne.n	800079a <HAL_RCC_OscConfig+0xde>
 80006ee:	4ba1      	ldr	r3, [pc, #644]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80006fe:	601a      	str	r2, [r3, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000700:	6863      	ldr	r3, [r4, #4]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d060      	beq.n	80007c8 <HAL_RCC_OscConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000706:	f7ff fe15 	bl	8000334 <HAL_GetTick>
 800070a:	4605      	mov	r5, r0
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800070c:	4b99      	ldr	r3, [pc, #612]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000714:	d114      	bne.n	8000740 <HAL_RCC_OscConfig+0x84>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000716:	f7ff fe0d 	bl	8000334 <HAL_GetTick>
 800071a:	1b40      	subs	r0, r0, r5
 800071c:	2864      	cmp	r0, #100	; 0x64
 800071e:	d9f5      	bls.n	800070c <HAL_RCC_OscConfig+0x50>
          {
            return HAL_TIMEOUT;
 8000720:	2003      	movs	r0, #3
 8000722:	e1d4      	b.n	8000ace <HAL_RCC_OscConfig+0x412>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000724:	4b93      	ldr	r3, [pc, #588]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800072c:	d0d9      	beq.n	80006e2 <HAL_RCC_OscConfig+0x26>
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800072e:	4b91      	ldr	r3, [pc, #580]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000736:	d003      	beq.n	8000740 <HAL_RCC_OscConfig+0x84>
 8000738:	6863      	ldr	r3, [r4, #4]
 800073a:	2b00      	cmp	r3, #0
 800073c:	f000 81c4 	beq.w	8000ac8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000740:	6823      	ldr	r3, [r4, #0]
 8000742:	f013 0f02 	tst.w	r3, #2
 8000746:	d06b      	beq.n	8000820 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000748:	4b8a      	ldr	r3, [pc, #552]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	f013 0f0c 	tst.w	r3, #12
 8000750:	d04e      	beq.n	80007f0 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000752:	4b88      	ldr	r3, [pc, #544]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	f003 030c 	and.w	r3, r3, #12
 800075a:	2b08      	cmp	r3, #8
 800075c:	d043      	beq.n	80007e6 <HAL_RCC_OscConfig+0x12a>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800075e:	68e3      	ldr	r3, [r4, #12]
 8000760:	2b00      	cmp	r3, #0
 8000762:	f000 8087 	beq.w	8000874 <HAL_RCC_OscConfig+0x1b8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000766:	4a83      	ldr	r2, [pc, #524]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 8000768:	6813      	ldr	r3, [r2, #0]
 800076a:	f043 0301 	orr.w	r3, r3, #1
 800076e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000770:	f7ff fde0 	bl	8000334 <HAL_GetTick>
 8000774:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000776:	4b7f      	ldr	r3, [pc, #508]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f013 0f02 	tst.w	r3, #2
 800077e:	d16a      	bne.n	8000856 <HAL_RCC_OscConfig+0x19a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000780:	f7ff fdd8 	bl	8000334 <HAL_GetTick>
 8000784:	1b40      	subs	r0, r0, r5
 8000786:	2802      	cmp	r0, #2
 8000788:	d9f5      	bls.n	8000776 <HAL_RCC_OscConfig+0xba>
          {
            return HAL_TIMEOUT;
 800078a:	2003      	movs	r0, #3
 800078c:	e19f      	b.n	8000ace <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800078e:	4a79      	ldr	r2, [pc, #484]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 8000790:	6813      	ldr	r3, [r2, #0]
 8000792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	e7b2      	b.n	8000700 <HAL_RCC_OscConfig+0x44>
 800079a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800079e:	d009      	beq.n	80007b4 <HAL_RCC_OscConfig+0xf8>
 80007a0:	4b74      	ldr	r3, [pc, #464]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	e7a5      	b.n	8000700 <HAL_RCC_OscConfig+0x44>
 80007b4:	4b6f      	ldr	r3, [pc, #444]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	e79b      	b.n	8000700 <HAL_RCC_OscConfig+0x44>
        tickstart = HAL_GetTick();
 80007c8:	f7ff fdb4 	bl	8000334 <HAL_GetTick>
 80007cc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007ce:	4b69      	ldr	r3, [pc, #420]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80007d6:	d0b3      	beq.n	8000740 <HAL_RCC_OscConfig+0x84>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007d8:	f7ff fdac 	bl	8000334 <HAL_GetTick>
 80007dc:	1b40      	subs	r0, r0, r5
 80007de:	2864      	cmp	r0, #100	; 0x64
 80007e0:	d9f5      	bls.n	80007ce <HAL_RCC_OscConfig+0x112>
            return HAL_TIMEOUT;
 80007e2:	2003      	movs	r0, #3
 80007e4:	e173      	b.n	8000ace <HAL_RCC_OscConfig+0x412>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80007e6:	4b63      	ldr	r3, [pc, #396]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80007ee:	d1b6      	bne.n	800075e <HAL_RCC_OscConfig+0xa2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007f0:	4b60      	ldr	r3, [pc, #384]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f013 0f02 	tst.w	r3, #2
 80007f8:	d004      	beq.n	8000804 <HAL_RCC_OscConfig+0x148>
 80007fa:	68e3      	ldr	r3, [r4, #12]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d001      	beq.n	8000804 <HAL_RCC_OscConfig+0x148>
        return HAL_ERROR;
 8000800:	2001      	movs	r0, #1
 8000802:	e164      	b.n	8000ace <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000804:	485b      	ldr	r0, [pc, #364]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 8000806:	6803      	ldr	r3, [r0, #0]
 8000808:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800080c:	6921      	ldr	r1, [r4, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800080e:	22f8      	movs	r2, #248	; 0xf8
 8000810:	fa92 f2a2 	rbit	r2, r2
 8000814:	fab2 f282 	clz	r2, r2
 8000818:	fa01 f202 	lsl.w	r2, r1, r2
 800081c:	4313      	orrs	r3, r2
 800081e:	6003      	str	r3, [r0, #0]
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000820:	6823      	ldr	r3, [r4, #0]
 8000822:	f013 0f08 	tst.w	r3, #8
 8000826:	d04d      	beq.n	80008c4 <HAL_RCC_OscConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000828:	6963      	ldr	r3, [r4, #20]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d036      	beq.n	800089c <HAL_RCC_OscConfig+0x1e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800082e:	4a51      	ldr	r2, [pc, #324]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 8000830:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000832:	f043 0301 	orr.w	r3, r3, #1
 8000836:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000838:	f7ff fd7c 	bl	8000334 <HAL_GetTick>
 800083c:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800083e:	4b4d      	ldr	r3, [pc, #308]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 8000840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000842:	f013 0f02 	tst.w	r3, #2
 8000846:	d13d      	bne.n	80008c4 <HAL_RCC_OscConfig+0x208>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000848:	f7ff fd74 	bl	8000334 <HAL_GetTick>
 800084c:	1b40      	subs	r0, r0, r5
 800084e:	2802      	cmp	r0, #2
 8000850:	d9f5      	bls.n	800083e <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8000852:	2003      	movs	r0, #3
 8000854:	e13b      	b.n	8000ace <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000856:	4847      	ldr	r0, [pc, #284]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 8000858:	6803      	ldr	r3, [r0, #0]
 800085a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800085e:	6921      	ldr	r1, [r4, #16]
 8000860:	22f8      	movs	r2, #248	; 0xf8
 8000862:	fa92 f2a2 	rbit	r2, r2
 8000866:	fab2 f282 	clz	r2, r2
 800086a:	fa01 f202 	lsl.w	r2, r1, r2
 800086e:	4313      	orrs	r3, r2
 8000870:	6003      	str	r3, [r0, #0]
 8000872:	e7d5      	b.n	8000820 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8000874:	4a3f      	ldr	r2, [pc, #252]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 8000876:	6813      	ldr	r3, [r2, #0]
 8000878:	f023 0301 	bic.w	r3, r3, #1
 800087c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800087e:	f7ff fd59 	bl	8000334 <HAL_GetTick>
 8000882:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000884:	4b3b      	ldr	r3, [pc, #236]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f013 0f02 	tst.w	r3, #2
 800088c:	d0c8      	beq.n	8000820 <HAL_RCC_OscConfig+0x164>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800088e:	f7ff fd51 	bl	8000334 <HAL_GetTick>
 8000892:	1b40      	subs	r0, r0, r5
 8000894:	2802      	cmp	r0, #2
 8000896:	d9f5      	bls.n	8000884 <HAL_RCC_OscConfig+0x1c8>
            return HAL_TIMEOUT;
 8000898:	2003      	movs	r0, #3
 800089a:	e118      	b.n	8000ace <HAL_RCC_OscConfig+0x412>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800089c:	4a35      	ldr	r2, [pc, #212]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 800089e:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80008a0:	f023 0301 	bic.w	r3, r3, #1
 80008a4:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80008a6:	f7ff fd45 	bl	8000334 <HAL_GetTick>
 80008aa:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008ac:	4b31      	ldr	r3, [pc, #196]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 80008ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008b0:	f013 0f02 	tst.w	r3, #2
 80008b4:	d006      	beq.n	80008c4 <HAL_RCC_OscConfig+0x208>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008b6:	f7ff fd3d 	bl	8000334 <HAL_GetTick>
 80008ba:	1b40      	subs	r0, r0, r5
 80008bc:	2802      	cmp	r0, #2
 80008be:	d9f5      	bls.n	80008ac <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80008c0:	2003      	movs	r0, #3
 80008c2:	e104      	b.n	8000ace <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008c4:	6823      	ldr	r3, [r4, #0]
 80008c6:	f013 0f04 	tst.w	r3, #4
 80008ca:	d07f      	beq.n	80009cc <HAL_RCC_OscConfig+0x310>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80008cc:	4b29      	ldr	r3, [pc, #164]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80008d4:	d131      	bne.n	800093a <HAL_RCC_OscConfig+0x27e>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	4b27      	ldr	r3, [pc, #156]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 80008d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008de:	641a      	str	r2, [r3, #64]	; 0x40
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e6:	9301      	str	r3, [sp, #4]
 80008e8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80008ea:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80008ec:	4b22      	ldr	r3, [pc, #136]	; (8000978 <HAL_RCC_OscConfig+0x2bc>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80008f4:	d023      	beq.n	800093e <HAL_RCC_OscConfig+0x282>
        }
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008f6:	68a3      	ldr	r3, [r4, #8]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d034      	beq.n	8000966 <HAL_RCC_OscConfig+0x2aa>
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d13d      	bne.n	800097c <HAL_RCC_OscConfig+0x2c0>
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 8000902:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000904:	f022 0201 	bic.w	r2, r2, #1
 8000908:	671a      	str	r2, [r3, #112]	; 0x70
 800090a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800090c:	f022 0204 	bic.w	r2, r2, #4
 8000910:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000912:	68a3      	ldr	r3, [r4, #8]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d047      	beq.n	80009a8 <HAL_RCC_OscConfig+0x2ec>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000918:	f7ff fd0c 	bl	8000334 <HAL_GetTick>
 800091c:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 8000920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000922:	f013 0f02 	tst.w	r3, #2
 8000926:	d150      	bne.n	80009ca <HAL_RCC_OscConfig+0x30e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000928:	f7ff fd04 	bl	8000334 <HAL_GetTick>
 800092c:	1b80      	subs	r0, r0, r6
 800092e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000932:	4298      	cmp	r0, r3
 8000934:	d9f3      	bls.n	800091e <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
 8000936:	2003      	movs	r0, #3
 8000938:	e0c9      	b.n	8000ace <HAL_RCC_OscConfig+0x412>
  FlagStatus pwrclkchanged = RESET;
 800093a:	2500      	movs	r5, #0
 800093c:	e7d6      	b.n	80008ec <HAL_RCC_OscConfig+0x230>
      PWR->CR1 |= PWR_CR1_DBP;
 800093e:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <HAL_RCC_OscConfig+0x2bc>)
 8000940:	6813      	ldr	r3, [r2, #0]
 8000942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000946:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000948:	f7ff fcf4 	bl	8000334 <HAL_GetTick>
 800094c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_RCC_OscConfig+0x2bc>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000956:	d1ce      	bne.n	80008f6 <HAL_RCC_OscConfig+0x23a>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000958:	f7ff fcec 	bl	8000334 <HAL_GetTick>
 800095c:	1b80      	subs	r0, r0, r6
 800095e:	2864      	cmp	r0, #100	; 0x64
 8000960:	d9f5      	bls.n	800094e <HAL_RCC_OscConfig+0x292>
          return HAL_TIMEOUT;
 8000962:	2003      	movs	r0, #3
 8000964:	e0b3      	b.n	8000ace <HAL_RCC_OscConfig+0x412>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000966:	4a03      	ldr	r2, [pc, #12]	; (8000974 <HAL_RCC_OscConfig+0x2b8>)
 8000968:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	6713      	str	r3, [r2, #112]	; 0x70
 8000970:	e7cf      	b.n	8000912 <HAL_RCC_OscConfig+0x256>
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40007000 	.word	0x40007000
 800097c:	2b05      	cmp	r3, #5
 800097e:	d009      	beq.n	8000994 <HAL_RCC_OscConfig+0x2d8>
 8000980:	4b55      	ldr	r3, [pc, #340]	; (8000ad8 <HAL_RCC_OscConfig+0x41c>)
 8000982:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000984:	f022 0201 	bic.w	r2, r2, #1
 8000988:	671a      	str	r2, [r3, #112]	; 0x70
 800098a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800098c:	f022 0204 	bic.w	r2, r2, #4
 8000990:	671a      	str	r2, [r3, #112]	; 0x70
 8000992:	e7be      	b.n	8000912 <HAL_RCC_OscConfig+0x256>
 8000994:	4b50      	ldr	r3, [pc, #320]	; (8000ad8 <HAL_RCC_OscConfig+0x41c>)
 8000996:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000998:	f042 0204 	orr.w	r2, r2, #4
 800099c:	671a      	str	r2, [r3, #112]	; 0x70
 800099e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80009a0:	f042 0201 	orr.w	r2, r2, #1
 80009a4:	671a      	str	r2, [r3, #112]	; 0x70
 80009a6:	e7b4      	b.n	8000912 <HAL_RCC_OscConfig+0x256>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80009a8:	f7ff fcc4 	bl	8000334 <HAL_GetTick>
 80009ac:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009ae:	4b4a      	ldr	r3, [pc, #296]	; (8000ad8 <HAL_RCC_OscConfig+0x41c>)
 80009b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80009b2:	f013 0f02 	tst.w	r3, #2
 80009b6:	d008      	beq.n	80009ca <HAL_RCC_OscConfig+0x30e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009b8:	f7ff fcbc 	bl	8000334 <HAL_GetTick>
 80009bc:	1b80      	subs	r0, r0, r6
 80009be:	f241 3388 	movw	r3, #5000	; 0x1388
 80009c2:	4298      	cmp	r0, r3
 80009c4:	d9f3      	bls.n	80009ae <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 80009c6:	2003      	movs	r0, #3
 80009c8:	e081      	b.n	8000ace <HAL_RCC_OscConfig+0x412>
        }       
      }
    }
    
    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80009ca:	b9f5      	cbnz	r5, 8000a0a <HAL_RCC_OscConfig+0x34e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009cc:	69a3      	ldr	r3, [r4, #24]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d07c      	beq.n	8000acc <HAL_RCC_OscConfig+0x410>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009d2:	4a41      	ldr	r2, [pc, #260]	; (8000ad8 <HAL_RCC_OscConfig+0x41c>)
 80009d4:	6892      	ldr	r2, [r2, #8]
 80009d6:	f002 020c 	and.w	r2, r2, #12
 80009da:	2a08      	cmp	r2, #8
 80009dc:	d079      	beq.n	8000ad2 <HAL_RCC_OscConfig+0x416>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d019      	beq.n	8000a16 <HAL_RCC_OscConfig+0x35a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80009e2:	4a3d      	ldr	r2, [pc, #244]	; (8000ad8 <HAL_RCC_OscConfig+0x41c>)
 80009e4:	6813      	ldr	r3, [r2, #0]
 80009e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80009ea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009ec:	f7ff fca2 	bl	8000334 <HAL_GetTick>
 80009f0:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80009f2:	4b39      	ldr	r3, [pc, #228]	; (8000ad8 <HAL_RCC_OscConfig+0x41c>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80009fa:	d063      	beq.n	8000ac4 <HAL_RCC_OscConfig+0x408>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009fc:	f7ff fc9a 	bl	8000334 <HAL_GetTick>
 8000a00:	1b00      	subs	r0, r0, r4
 8000a02:	2802      	cmp	r0, #2
 8000a04:	d9f5      	bls.n	80009f2 <HAL_RCC_OscConfig+0x336>
          {
            return HAL_TIMEOUT;
 8000a06:	2003      	movs	r0, #3
 8000a08:	e061      	b.n	8000ace <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a0a:	4a33      	ldr	r2, [pc, #204]	; (8000ad8 <HAL_RCC_OscConfig+0x41c>)
 8000a0c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a12:	6413      	str	r3, [r2, #64]	; 0x40
 8000a14:	e7da      	b.n	80009cc <HAL_RCC_OscConfig+0x310>
        __HAL_RCC_PLL_DISABLE();
 8000a16:	4a30      	ldr	r2, [pc, #192]	; (8000ad8 <HAL_RCC_OscConfig+0x41c>)
 8000a18:	6813      	ldr	r3, [r2, #0]
 8000a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000a1e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000a20:	f7ff fc88 	bl	8000334 <HAL_GetTick>
 8000a24:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a26:	4b2c      	ldr	r3, [pc, #176]	; (8000ad8 <HAL_RCC_OscConfig+0x41c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000a2e:	d006      	beq.n	8000a3e <HAL_RCC_OscConfig+0x382>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a30:	f7ff fc80 	bl	8000334 <HAL_GetTick>
 8000a34:	1b40      	subs	r0, r0, r5
 8000a36:	2802      	cmp	r0, #2
 8000a38:	d9f5      	bls.n	8000a26 <HAL_RCC_OscConfig+0x36a>
            return HAL_TIMEOUT;
 8000a3a:	2003      	movs	r0, #3
 8000a3c:	e047      	b.n	8000ace <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a3e:	69e3      	ldr	r3, [r4, #28]
 8000a40:	6a22      	ldr	r2, [r4, #32]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000a46:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000a4a:	fa92 f2a2 	rbit	r2, r2
 8000a4e:	fab2 f282 	clz	r2, r2
 8000a52:	fa01 f202 	lsl.w	r2, r1, r2
 8000a56:	4313      	orrs	r3, r2
 8000a58:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000a5a:	0852      	lsrs	r2, r2, #1
 8000a5c:	3a01      	subs	r2, #1
 8000a5e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8000a62:	fa91 f1a1 	rbit	r1, r1
 8000a66:	fab1 f181 	clz	r1, r1
 8000a6a:	408a      	lsls	r2, r1
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000a70:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8000a74:	fa92 f2a2 	rbit	r2, r2
 8000a78:	fab2 f282 	clz	r2, r2
 8000a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a80:	4313      	orrs	r3, r2
 8000a82:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000a84:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000a88:	fa92 f2a2 	rbit	r2, r2
 8000a8c:	fab2 f282 	clz	r2, r2
 8000a90:	fa01 f202 	lsl.w	r2, r1, r2
 8000a94:	4313      	orrs	r3, r2
 8000a96:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <HAL_RCC_OscConfig+0x41c>)
 8000a98:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8000a9a:	6813      	ldr	r3, [r2, #0]
 8000a9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000aa2:	f7ff fc47 	bl	8000334 <HAL_GetTick>
 8000aa6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <HAL_RCC_OscConfig+0x41c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000ab0:	d106      	bne.n	8000ac0 <HAL_RCC_OscConfig+0x404>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ab2:	f7ff fc3f 	bl	8000334 <HAL_GetTick>
 8000ab6:	1b00      	subs	r0, r0, r4
 8000ab8:	2802      	cmp	r0, #2
 8000aba:	d9f5      	bls.n	8000aa8 <HAL_RCC_OscConfig+0x3ec>
            return HAL_TIMEOUT;
 8000abc:	2003      	movs	r0, #3
 8000abe:	e006      	b.n	8000ace <HAL_RCC_OscConfig+0x412>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	e004      	b.n	8000ace <HAL_RCC_OscConfig+0x412>
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	e002      	b.n	8000ace <HAL_RCC_OscConfig+0x412>
        return HAL_ERROR;
 8000ac8:	2001      	movs	r0, #1
 8000aca:	e000      	b.n	8000ace <HAL_RCC_OscConfig+0x412>
  return HAL_OK;
 8000acc:	2000      	movs	r0, #0
}
 8000ace:	b002      	add	sp, #8
 8000ad0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	e7fb      	b.n	8000ace <HAL_RCC_OscConfig+0x412>
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800

08000adc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000adc:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <HAL_RCC_GetSysClockFreq+0x80>)
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	f003 030c 	and.w	r3, r3, #12
 8000ae4:	2b08      	cmp	r3, #8
 8000ae6:	d136      	bne.n	8000b56 <HAL_RCC_GetSysClockFreq+0x7a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ae8:	4a1c      	ldr	r2, [pc, #112]	; (8000b5c <HAL_RCC_GetSysClockFreq+0x80>)
 8000aea:	6853      	ldr	r3, [r2, #4]
 8000aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000af0:	6852      	ldr	r2, [r2, #4]
 8000af2:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8000af6:	d01e      	beq.n	8000b36 <HAL_RCC_GetSysClockFreq+0x5a>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000af8:	4819      	ldr	r0, [pc, #100]	; (8000b60 <HAL_RCC_GetSysClockFreq+0x84>)
 8000afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8000afe:	4a17      	ldr	r2, [pc, #92]	; (8000b5c <HAL_RCC_GetSysClockFreq+0x80>)
 8000b00:	6850      	ldr	r0, [r2, #4]
 8000b02:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000b06:	4010      	ands	r0, r2
 8000b08:	fa92 f2a2 	rbit	r2, r2
 8000b0c:	fab2 f282 	clz	r2, r2
 8000b10:	40d0      	lsrs	r0, r2
 8000b12:	fb00 f003 	mul.w	r0, r0, r3
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <HAL_RCC_GetSysClockFreq+0x80>)
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b1e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b22:	fa92 f2a2 	rbit	r2, r2
 8000b26:	fab2 f282 	clz	r2, r2
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	005b      	lsls	r3, r3, #1
      
      sysclockfreq = pllvco/pllp;
 8000b30:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000b34:	4770      	bx	lr
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000b36:	480a      	ldr	r0, [pc, #40]	; (8000b60 <HAL_RCC_GetSysClockFreq+0x84>)
 8000b38:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b3c:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <HAL_RCC_GetSysClockFreq+0x80>)
 8000b3e:	6850      	ldr	r0, [r2, #4]
 8000b40:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000b44:	4010      	ands	r0, r2
 8000b46:	fa92 f2a2 	rbit	r2, r2
 8000b4a:	fab2 f282 	clz	r2, r2
 8000b4e:	40d0      	lsrs	r0, r2
 8000b50:	fb00 f003 	mul.w	r0, r0, r3
 8000b54:	e7df      	b.n	8000b16 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSI_VALUE;
 8000b56:	4802      	ldr	r0, [pc, #8]	; (8000b60 <HAL_RCC_GetSysClockFreq+0x84>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	00f42400 	.word	0x00f42400

08000b64 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b64:	4b5c      	ldr	r3, [pc, #368]	; (8000cd8 <HAL_RCC_ClockConfig+0x174>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f003 030f 	and.w	r3, r3, #15
 8000b6c:	428b      	cmp	r3, r1
 8000b6e:	d20c      	bcs.n	8000b8a <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b70:	4a59      	ldr	r2, [pc, #356]	; (8000cd8 <HAL_RCC_ClockConfig+0x174>)
 8000b72:	6813      	ldr	r3, [r2, #0]
 8000b74:	f023 030f 	bic.w	r3, r3, #15
 8000b78:	430b      	orrs	r3, r1
 8000b7a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b7c:	6813      	ldr	r3, [r2, #0]
 8000b7e:	f003 030f 	and.w	r3, r3, #15
 8000b82:	4299      	cmp	r1, r3
 8000b84:	d001      	beq.n	8000b8a <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8000b86:	2001      	movs	r0, #1
 8000b88:	4770      	bx	lr
{
 8000b8a:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b8c:	6803      	ldr	r3, [r0, #0]
 8000b8e:	f013 0f02 	tst.w	r3, #2
 8000b92:	d006      	beq.n	8000ba2 <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b94:	4a51      	ldr	r2, [pc, #324]	; (8000cdc <HAL_RCC_ClockConfig+0x178>)
 8000b96:	6893      	ldr	r3, [r2, #8]
 8000b98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b9c:	6884      	ldr	r4, [r0, #8]
 8000b9e:	4323      	orrs	r3, r4
 8000ba0:	6093      	str	r3, [r2, #8]
 8000ba2:	460d      	mov	r5, r1
 8000ba4:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ba6:	6803      	ldr	r3, [r0, #0]
 8000ba8:	f013 0f01 	tst.w	r3, #1
 8000bac:	d052      	beq.n	8000c54 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bae:	6843      	ldr	r3, [r0, #4]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d023      	beq.n	8000bfc <HAL_RCC_ClockConfig+0x98>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d028      	beq.n	8000c0a <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bb8:	4a48      	ldr	r2, [pc, #288]	; (8000cdc <HAL_RCC_ClockConfig+0x178>)
 8000bba:	6812      	ldr	r2, [r2, #0]
 8000bbc:	f012 0f02 	tst.w	r2, #2
 8000bc0:	f000 8088 	beq.w	8000cd4 <HAL_RCC_ClockConfig+0x170>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bc4:	4945      	ldr	r1, [pc, #276]	; (8000cdc <HAL_RCC_ClockConfig+0x178>)
 8000bc6:	688a      	ldr	r2, [r1, #8]
 8000bc8:	f022 0203 	bic.w	r2, r2, #3
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000bd0:	f7ff fbb0 	bl	8000334 <HAL_GetTick>
 8000bd4:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bd6:	6863      	ldr	r3, [r4, #4]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d01d      	beq.n	8000c18 <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d02a      	beq.n	8000c36 <HAL_RCC_ClockConfig+0xd2>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000be0:	4b3e      	ldr	r3, [pc, #248]	; (8000cdc <HAL_RCC_ClockConfig+0x178>)
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	f013 0f0c 	tst.w	r3, #12
 8000be8:	d034      	beq.n	8000c54 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bea:	f7ff fba3 	bl	8000334 <HAL_GetTick>
 8000bee:	1b80      	subs	r0, r0, r6
 8000bf0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000bf4:	4298      	cmp	r0, r3
 8000bf6:	d9f3      	bls.n	8000be0 <HAL_RCC_ClockConfig+0x7c>
          return HAL_TIMEOUT;
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bfc:	4a37      	ldr	r2, [pc, #220]	; (8000cdc <HAL_RCC_ClockConfig+0x178>)
 8000bfe:	6812      	ldr	r2, [r2, #0]
 8000c00:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000c04:	d1de      	bne.n	8000bc4 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 8000c06:	2001      	movs	r0, #1
 8000c08:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c0a:	4a34      	ldr	r2, [pc, #208]	; (8000cdc <HAL_RCC_ClockConfig+0x178>)
 8000c0c:	6812      	ldr	r2, [r2, #0]
 8000c0e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000c12:	d1d7      	bne.n	8000bc4 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 8000c14:	2001      	movs	r0, #1
 8000c16:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c18:	4b30      	ldr	r3, [pc, #192]	; (8000cdc <HAL_RCC_ClockConfig+0x178>)
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	f003 030c 	and.w	r3, r3, #12
 8000c20:	2b04      	cmp	r3, #4
 8000c22:	d017      	beq.n	8000c54 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c24:	f7ff fb86 	bl	8000334 <HAL_GetTick>
 8000c28:	1b80      	subs	r0, r0, r6
 8000c2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c2e:	4298      	cmp	r0, r3
 8000c30:	d9f2      	bls.n	8000c18 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8000c32:	2003      	movs	r0, #3
 8000c34:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c36:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <HAL_RCC_ClockConfig+0x178>)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	f003 030c 	and.w	r3, r3, #12
 8000c3e:	2b08      	cmp	r3, #8
 8000c40:	d008      	beq.n	8000c54 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c42:	f7ff fb77 	bl	8000334 <HAL_GetTick>
 8000c46:	1b80      	subs	r0, r0, r6
 8000c48:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c4c:	4298      	cmp	r0, r3
 8000c4e:	d9f2      	bls.n	8000c36 <HAL_RCC_ClockConfig+0xd2>
          return HAL_TIMEOUT;
 8000c50:	2003      	movs	r0, #3
 8000c52:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c54:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <HAL_RCC_ClockConfig+0x174>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 030f 	and.w	r3, r3, #15
 8000c5c:	429d      	cmp	r5, r3
 8000c5e:	d20c      	bcs.n	8000c7a <HAL_RCC_ClockConfig+0x116>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c60:	4a1d      	ldr	r2, [pc, #116]	; (8000cd8 <HAL_RCC_ClockConfig+0x174>)
 8000c62:	6813      	ldr	r3, [r2, #0]
 8000c64:	f023 030f 	bic.w	r3, r3, #15
 8000c68:	432b      	orrs	r3, r5
 8000c6a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c6c:	6813      	ldr	r3, [r2, #0]
 8000c6e:	f003 030f 	and.w	r3, r3, #15
 8000c72:	429d      	cmp	r5, r3
 8000c74:	d001      	beq.n	8000c7a <HAL_RCC_ClockConfig+0x116>
      return HAL_ERROR;
 8000c76:	2001      	movs	r0, #1
}
 8000c78:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c7a:	6823      	ldr	r3, [r4, #0]
 8000c7c:	f013 0f04 	tst.w	r3, #4
 8000c80:	d006      	beq.n	8000c90 <HAL_RCC_ClockConfig+0x12c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c82:	4a16      	ldr	r2, [pc, #88]	; (8000cdc <HAL_RCC_ClockConfig+0x178>)
 8000c84:	6893      	ldr	r3, [r2, #8]
 8000c86:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000c8a:	68e1      	ldr	r1, [r4, #12]
 8000c8c:	430b      	orrs	r3, r1
 8000c8e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c90:	6823      	ldr	r3, [r4, #0]
 8000c92:	f013 0f08 	tst.w	r3, #8
 8000c96:	d007      	beq.n	8000ca8 <HAL_RCC_ClockConfig+0x144>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000c98:	4a10      	ldr	r2, [pc, #64]	; (8000cdc <HAL_RCC_ClockConfig+0x178>)
 8000c9a:	6893      	ldr	r3, [r2, #8]
 8000c9c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000ca0:	6921      	ldr	r1, [r4, #16]
 8000ca2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ca6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000ca8:	f7ff ff18 	bl	8000adc <HAL_RCC_GetSysClockFreq>
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <HAL_RCC_ClockConfig+0x178>)
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cb4:	22f0      	movs	r2, #240	; 0xf0
 8000cb6:	fa92 f2a2 	rbit	r2, r2
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	40d3      	lsrs	r3, r2
 8000cc0:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <HAL_RCC_ClockConfig+0x17c>)
 8000cc2:	5cd3      	ldrb	r3, [r2, r3]
 8000cc4:	40d8      	lsrs	r0, r3
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <HAL_RCC_ClockConfig+0x180>)
 8000cc8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fb08 	bl	80002e0 <HAL_InitTick>
  return HAL_OK;
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	bd70      	pop	{r4, r5, r6, pc}
 8000cd8:	40023c00 	.word	0x40023c00
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	0800316c 	.word	0x0800316c
 8000ce4:	20000020 	.word	0x20000020

08000ce8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000ce8:	4b01      	ldr	r3, [pc, #4]	; (8000cf0 <HAL_RCC_GetHCLKFreq+0x8>)
 8000cea:	6818      	ldr	r0, [r3, #0]
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000020 	.word	0x20000020

08000cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8000cf4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8000cf6:	f7ff fff7 	bl	8000ce8 <HAL_RCC_GetHCLKFreq>
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000d02:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000d06:	fa92 f2a2 	rbit	r2, r2
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	40d3      	lsrs	r3, r2
 8000d10:	4a02      	ldr	r2, [pc, #8]	; (8000d1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8000d12:	5cd3      	ldrb	r3, [r2, r3]
}
 8000d14:	40d8      	lsrs	r0, r3
 8000d16:	bd08      	pop	{r3, pc}
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	0800317c 	.word	0x0800317c

08000d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000d20:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8000d22:	f7ff ffe1 	bl	8000ce8 <HAL_RCC_GetHCLKFreq>
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000d2e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000d32:	fa92 f2a2 	rbit	r2, r2
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	40d3      	lsrs	r3, r2
 8000d3c:	4a02      	ldr	r2, [pc, #8]	; (8000d48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000d3e:	5cd3      	ldrb	r3, [r2, r3]
} 
 8000d40:	40d8      	lsrs	r0, r3
 8000d42:	bd08      	pop	{r3, pc}
 8000d44:	40023800 	.word	0x40023800
 8000d48:	0800317c 	.word	0x0800317c

08000d4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8000d52:	6803      	ldr	r3, [r0, #0]
 8000d54:	f013 0f01 	tst.w	r3, #1
 8000d58:	d00c      	beq.n	8000d74 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000d5a:	4bb5      	ldr	r3, [pc, #724]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8000d5c:	689a      	ldr	r2, [r3, #8]
 8000d5e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	609a      	str	r2, [r3, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8000d6c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000d6e:	b1c3      	cbz	r3, 8000da2 <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 8000d70:	2700      	movs	r7, #0
 8000d72:	e000      	b.n	8000d76 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8000d74:	2700      	movs	r7, #0
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8000d76:	6823      	ldr	r3, [r4, #0]
 8000d78:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8000d7c:	d015      	beq.n	8000daa <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8000d7e:	4aac      	ldr	r2, [pc, #688]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8000d80:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8000d84:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000d88:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000d8a:	430b      	orrs	r3, r1
 8000d8c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8000d90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000d96:	d006      	beq.n	8000da6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f000 8145 	beq.w	8001028 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  uint32_t pllsaiused = 0;
 8000d9e:	2500      	movs	r5, #0
 8000da0:	e004      	b.n	8000dac <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1; 
 8000da2:	2701      	movs	r7, #1
 8000da4:	e7e7      	b.n	8000d76 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1; 
 8000da6:	2701      	movs	r7, #1
 8000da8:	e7f6      	b.n	8000d98 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 8000daa:	2500      	movs	r5, #0
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8000dac:	6823      	ldr	r3, [r4, #0]
 8000dae:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000db2:	d00f      	beq.n	8000dd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8000db4:	4a9e      	ldr	r2, [pc, #632]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8000db6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8000dba:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000dbe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000dc0:	430b      	orrs	r3, r1
 8000dc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8000dc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000dc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000dcc:	f000 812e 	beq.w	800102c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8000dd0:	b903      	cbnz	r3, 8000dd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1; 
 8000dd2:	2501      	movs	r5, #1
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8000dd4:	6823      	ldr	r3, [r4, #0]
 8000dd6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000dda:	d000      	beq.n	8000dde <HAL_RCCEx_PeriphCLKConfig+0x92>
  {    
      plli2sused = 1; 
 8000ddc:	2701      	movs	r7, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000dde:	f013 0f20 	tst.w	r3, #32
 8000de2:	f040 8127 	bne.w	8001034 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8000de6:	6823      	ldr	r3, [r4, #0]
 8000de8:	f013 0f10 	tst.w	r3, #16
 8000dec:	d00c      	beq.n	8000e08 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8000dee:	4b90      	ldr	r3, [pc, #576]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8000df0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000df4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8000df8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000dfc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000e00:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000e02:	430a      	orrs	r2, r1
 8000e04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000e08:	6823      	ldr	r3, [r4, #0]
 8000e0a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000e0e:	d008      	beq.n	8000e22 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000e10:	4a87      	ldr	r2, [pc, #540]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8000e12:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000e16:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000e1a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8000e1c:	430b      	orrs	r3, r1
 8000e1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8000e22:	6823      	ldr	r3, [r4, #0]
 8000e24:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000e28:	d008      	beq.n	8000e3c <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8000e2a:	4a81      	ldr	r2, [pc, #516]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8000e2c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000e30:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000e34:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8000e36:	430b      	orrs	r3, r1
 8000e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000e3c:	6823      	ldr	r3, [r4, #0]
 8000e3e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000e42:	d008      	beq.n	8000e56 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000e44:	4a7a      	ldr	r2, [pc, #488]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8000e46:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000e4a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000e4e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8000e50:	430b      	orrs	r3, r1
 8000e52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8000e56:	6823      	ldr	r3, [r4, #0]
 8000e58:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e5c:	d008      	beq.n	8000e70 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8000e5e:	4a74      	ldr	r2, [pc, #464]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8000e60:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000e64:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000e68:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8000e6a:	430b      	orrs	r3, r1
 8000e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000e70:	6823      	ldr	r3, [r4, #0]
 8000e72:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000e76:	d008      	beq.n	8000e8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000e78:	4a6d      	ldr	r2, [pc, #436]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8000e7a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000e7e:	f023 0303 	bic.w	r3, r3, #3
 8000e82:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000e84:	430b      	orrs	r3, r1
 8000e86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000e90:	d008      	beq.n	8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000e92:	4a67      	ldr	r2, [pc, #412]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8000e94:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000e98:	f023 030c 	bic.w	r3, r3, #12
 8000e9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000e9e:	430b      	orrs	r3, r1
 8000ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8000ea4:	6823      	ldr	r3, [r4, #0]
 8000ea6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000eaa:	d008      	beq.n	8000ebe <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8000eac:	4a60      	ldr	r2, [pc, #384]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8000eae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000eb2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000eb6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8000eb8:	430b      	orrs	r3, r1
 8000eba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8000ebe:	6823      	ldr	r3, [r4, #0]
 8000ec0:	f413 7f00 	tst.w	r3, #512	; 0x200
 8000ec4:	d008      	beq.n	8000ed8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8000ec6:	4a5a      	ldr	r2, [pc, #360]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8000ec8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000ecc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000ed0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000ed2:	430b      	orrs	r3, r1
 8000ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8000ed8:	6823      	ldr	r3, [r4, #0]
 8000eda:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000ede:	d008      	beq.n	8000ef2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8000ee0:	4a53      	ldr	r2, [pc, #332]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8000ee2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000eea:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000eec:	430b      	orrs	r3, r1
 8000eee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8000ef2:	6823      	ldr	r3, [r4, #0]
 8000ef4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8000ef8:	d008      	beq.n	8000f0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8000efa:	4a4d      	ldr	r2, [pc, #308]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8000efc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000f00:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000f04:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8000f06:	430b      	orrs	r3, r1
 8000f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8000f0c:	6823      	ldr	r3, [r4, #0]
 8000f0e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000f12:	d008      	beq.n	8000f26 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8000f14:	4a46      	ldr	r2, [pc, #280]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8000f16:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000f1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f1e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000f20:	430b      	orrs	r3, r1
 8000f22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8000f26:	6823      	ldr	r3, [r4, #0]
 8000f28:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000f2c:	d008      	beq.n	8000f40 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8000f2e:	4a40      	ldr	r2, [pc, #256]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8000f30:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000f34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f38:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8000f3a:	430b      	orrs	r3, r1
 8000f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8000f40:	6823      	ldr	r3, [r4, #0]
 8000f42:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000f46:	d008      	beq.n	8000f5a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8000f48:	4a39      	ldr	r2, [pc, #228]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8000f4a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000f4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000f52:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8000f54:	430b      	orrs	r3, r1
 8000f56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8000f5a:	6823      	ldr	r3, [r4, #0]
 8000f5c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8000f60:	d00d      	beq.n	8000f7e <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8000f62:	4a33      	ldr	r2, [pc, #204]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8000f64:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000f68:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000f6c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8000f6e:	430b      	orrs	r3, r1
 8000f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8000f74:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8000f76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000f7a:	f000 80c1 	beq.w	8001100 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8000f7e:	6823      	ldr	r3, [r4, #0]
 8000f80:	f013 0f08 	tst.w	r3, #8
 8000f84:	d000      	beq.n	8000f88 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    pllsaiused = 1; 
 8000f86:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8000f88:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8000f8c:	d008      	beq.n	8000fa0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8000f8e:	4a28      	ldr	r2, [pc, #160]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8000f90:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000f94:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000f98:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8000f9a:	430b      	orrs	r3, r1
 8000f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8000fa0:	6823      	ldr	r3, [r4, #0]
 8000fa2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8000fa6:	d009      	beq.n	8000fbc <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8000fa8:	4a21      	ldr	r2, [pc, #132]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8000faa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000fae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8000fb6:	430b      	orrs	r3, r1
 8000fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8000fbc:	6823      	ldr	r3, [r4, #0]
 8000fbe:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8000fc2:	d009      	beq.n	8000fd8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8000fc4:	4a1a      	ldr	r2, [pc, #104]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8000fc6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8000fca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000fce:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8000fd2:	430b      	orrs	r3, r1
 8000fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8000fd8:	6823      	ldr	r3, [r4, #0]
 8000fda:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8000fde:	d009      	beq.n	8000ff4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8000fe0:	4a13      	ldr	r2, [pc, #76]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8000fe2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8000fe6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000fea:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8000fee:	430b      	orrs	r3, r1
 8000ff0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8000ff4:	6823      	ldr	r3, [r4, #0]
 8000ff6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000ffa:	d009      	beq.n	8001010 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8000ffc:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8000ffe:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001002:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001006:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800100a:	430b      	orrs	r3, r1
 800100c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001010:	2f00      	cmp	r7, #0
 8001012:	d177      	bne.n	8001104 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001014:	6823      	ldr	r3, [r4, #0]
 8001016:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800101a:	d073      	beq.n	8001104 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800101c:	2d00      	cmp	r5, #0
 800101e:	f040 819b 	bne.w	8001358 <HAL_RCCEx_PeriphCLKConfig+0x60c>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001022:	2000      	movs	r0, #0
}
 8001024:	b003      	add	sp, #12
 8001026:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1; 
 8001028:	2501      	movs	r5, #1
 800102a:	e6bf      	b.n	8000dac <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1; 
 800102c:	2701      	movs	r7, #1
 800102e:	e6cf      	b.n	8000dd0 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8001030:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 8001034:	4bc5      	ldr	r3, [pc, #788]	; (800134c <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8001036:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001038:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800103c:	641a      	str	r2, [r3, #64]	; 0x40
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001048:	4ac1      	ldr	r2, [pc, #772]	; (8001350 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 800104a:	6813      	ldr	r3, [r2, #0]
 800104c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001050:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001052:	f7ff f96f 	bl	8000334 <HAL_GetTick>
 8001056:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001058:	4bbd      	ldr	r3, [pc, #756]	; (8001350 <HAL_RCCEx_PeriphCLKConfig+0x604>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001060:	d106      	bne.n	8001070 <HAL_RCCEx_PeriphCLKConfig+0x324>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001062:	f7ff f967 	bl	8000334 <HAL_GetTick>
 8001066:	1b80      	subs	r0, r0, r6
 8001068:	2864      	cmp	r0, #100	; 0x64
 800106a:	d9f5      	bls.n	8001058 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        return HAL_TIMEOUT;
 800106c:	2003      	movs	r0, #3
 800106e:	e7d9      	b.n	8001024 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001070:	4bb6      	ldr	r3, [pc, #728]	; (800134c <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8001072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001074:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001078:	d015      	beq.n	80010a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800107a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800107c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001080:	4293      	cmp	r3, r2
 8001082:	d010      	beq.n	80010a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001084:	4bb1      	ldr	r3, [pc, #708]	; (800134c <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8001086:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001088:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800108c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800108e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001092:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001094:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001096:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800109a:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800109c:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800109e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010a0:	f013 0f01 	tst.w	r3, #1
 80010a4:	d112      	bne.n	80010cc <HAL_RCCEx_PeriphCLKConfig+0x380>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80010a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80010a8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80010ac:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80010b0:	d01d      	beq.n	80010ee <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 80010b2:	4aa6      	ldr	r2, [pc, #664]	; (800134c <HAL_RCCEx_PeriphCLKConfig+0x600>)
 80010b4:	6893      	ldr	r3, [r2, #8]
 80010b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80010ba:	6093      	str	r3, [r2, #8]
 80010bc:	49a3      	ldr	r1, [pc, #652]	; (800134c <HAL_RCCEx_PeriphCLKConfig+0x600>)
 80010be:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80010c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80010c2:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80010c6:	4313      	orrs	r3, r2
 80010c8:	670b      	str	r3, [r1, #112]	; 0x70
 80010ca:	e68c      	b.n	8000de6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 80010cc:	f7ff f932 	bl	8000334 <HAL_GetTick>
 80010d0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d2:	4b9e      	ldr	r3, [pc, #632]	; (800134c <HAL_RCCEx_PeriphCLKConfig+0x600>)
 80010d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010d6:	f013 0f02 	tst.w	r3, #2
 80010da:	d1e4      	bne.n	80010a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010dc:	f7ff f92a 	bl	8000334 <HAL_GetTick>
 80010e0:	1b80      	subs	r0, r0, r6
 80010e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80010e6:	4298      	cmp	r0, r3
 80010e8:	d9f3      	bls.n	80010d2 <HAL_RCCEx_PeriphCLKConfig+0x386>
            return HAL_TIMEOUT;
 80010ea:	2003      	movs	r0, #3
 80010ec:	e79a      	b.n	8001024 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80010ee:	4897      	ldr	r0, [pc, #604]	; (800134c <HAL_RCCEx_PeriphCLKConfig+0x600>)
 80010f0:	6882      	ldr	r2, [r0, #8]
 80010f2:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80010f6:	4997      	ldr	r1, [pc, #604]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x608>)
 80010f8:	4019      	ands	r1, r3
 80010fa:	430a      	orrs	r2, r1
 80010fc:	6082      	str	r2, [r0, #8]
 80010fe:	e7dd      	b.n	80010bc <HAL_RCCEx_PeriphCLKConfig+0x370>
      pllsaiused = 1; 
 8001100:	2501      	movs	r5, #1
 8001102:	e73c      	b.n	8000f7e <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_PLLI2S_DISABLE();  
 8001104:	4a91      	ldr	r2, [pc, #580]	; (800134c <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8001106:	6813      	ldr	r3, [r2, #0]
 8001108:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800110c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800110e:	f7ff f911 	bl	8000334 <HAL_GetTick>
 8001112:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001114:	4b8d      	ldr	r3, [pc, #564]	; (800134c <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800111c:	d006      	beq.n	800112c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800111e:	f7ff f909 	bl	8000334 <HAL_GetTick>
 8001122:	1b80      	subs	r0, r0, r6
 8001124:	2864      	cmp	r0, #100	; 0x64
 8001126:	d9f5      	bls.n	8001114 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
 8001128:	2003      	movs	r0, #3
 800112a:	e77b      	b.n	8001024 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800112c:	6823      	ldr	r3, [r4, #0]
 800112e:	f013 0f01 	tst.w	r3, #1
 8001132:	d03a      	beq.n	80011aa <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8001134:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001136:	bbc3      	cbnz	r3, 80011aa <HAL_RCCEx_PeriphCLKConfig+0x45e>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8001138:	4e84      	ldr	r6, [pc, #528]	; (800134c <HAL_RCCEx_PeriphCLKConfig+0x600>)
 800113a:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 800113e:	f403 3e40 	and.w	lr, r3, #196608	; 0x30000
 8001142:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001146:	fa90 f3a0 	rbit	r3, r0
 800114a:	fab3 f383 	clz	r3, r3
 800114e:	fa2e fe03 	lsr.w	lr, lr, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8001152:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 8001156:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800115a:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800115e:	fa91 f3a1 	rbit	r3, r1
 8001162:	fab3 f383 	clz	r3, r3
 8001166:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001168:	6863      	ldr	r3, [r4, #4]
 800116a:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 800116e:	fa97 f7a7 	rbit	r7, r7
 8001172:	fab7 f787 	clz	r7, r7
 8001176:	40bb      	lsls	r3, r7
 8001178:	fa90 f0a0 	rbit	r0, r0
 800117c:	fab0 f080 	clz	r0, r0
 8001180:	fa0e f000 	lsl.w	r0, lr, r0
 8001184:	4303      	orrs	r3, r0
 8001186:	fa91 f1a1 	rbit	r1, r1
 800118a:	fab1 f181 	clz	r1, r1
 800118e:	408a      	lsls	r2, r1
 8001190:	4313      	orrs	r3, r2
 8001192:	68a1      	ldr	r1, [r4, #8]
 8001194:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001198:	fa92 f2a2 	rbit	r2, r2
 800119c:	fab2 f282 	clz	r2, r2
 80011a0:	fa01 f202 	lsl.w	r2, r1, r2
 80011a4:	4313      	orrs	r3, r2
 80011a6:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80011aa:	6823      	ldr	r3, [r4, #0]
 80011ac:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80011b0:	d004      	beq.n	80011bc <HAL_RCCEx_PeriphCLKConfig+0x470>
 80011b2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80011b4:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80011b8:	f000 8085 	beq.w	80012c6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80011bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80011c0:	d003      	beq.n	80011ca <HAL_RCCEx_PeriphCLKConfig+0x47e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 80011c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011c8:	d07d      	beq.n	80012c6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80011ca:	6823      	ldr	r3, [r4, #0]
 80011cc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80011d0:	d037      	beq.n	8001242 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 80011d2:	4e5e      	ldr	r6, [pc, #376]	; (800134c <HAL_RCCEx_PeriphCLKConfig+0x600>)
 80011d4:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
 80011d8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80011dc:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
 80011e0:	fa9e f3ae 	rbit	r3, lr
 80011e4:	fab3 f383 	clz	r3, r3
 80011e8:	40d9      	lsrs	r1, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80011ea:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 80011ee:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80011f2:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 80011f6:	fa90 f3a0 	rbit	r3, r0
 80011fa:	fab3 f383 	clz	r3, r3
 80011fe:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001200:	6863      	ldr	r3, [r4, #4]
 8001202:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8001206:	fa97 f7a7 	rbit	r7, r7
 800120a:	fab7 f787 	clz	r7, r7
 800120e:	40bb      	lsls	r3, r7
 8001210:	6927      	ldr	r7, [r4, #16]
 8001212:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 8001216:	fa9c fcac 	rbit	ip, ip
 800121a:	fabc fc8c 	clz	ip, ip
 800121e:	fa07 f70c 	lsl.w	r7, r7, ip
 8001222:	433b      	orrs	r3, r7
 8001224:	fa9e feae 	rbit	lr, lr
 8001228:	fabe fe8e 	clz	lr, lr
 800122c:	fa01 f10e 	lsl.w	r1, r1, lr
 8001230:	430b      	orrs	r3, r1
 8001232:	fa90 f0a0 	rbit	r0, r0
 8001236:	fab0 f080 	clz	r0, r0
 800123a:	4082      	lsls	r2, r0
 800123c:	4313      	orrs	r3, r2
 800123e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001242:	6823      	ldr	r3, [r4, #0]
 8001244:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001248:	d028      	beq.n	800129c <HAL_RCCEx_PeriphCLKConfig+0x550>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800124a:	6863      	ldr	r3, [r4, #4]
 800124c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001250:	fa92 f2a2 	rbit	r2, r2
 8001254:	fab2 f282 	clz	r2, r2
 8001258:	4093      	lsls	r3, r2
 800125a:	6921      	ldr	r1, [r4, #16]
 800125c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001260:	fa92 f2a2 	rbit	r2, r2
 8001264:	fab2 f282 	clz	r2, r2
 8001268:	fa01 f202 	lsl.w	r2, r1, r2
 800126c:	4313      	orrs	r3, r2
 800126e:	68e1      	ldr	r1, [r4, #12]
 8001270:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8001274:	fa92 f2a2 	rbit	r2, r2
 8001278:	fab2 f282 	clz	r2, r2
 800127c:	fa01 f202 	lsl.w	r2, r1, r2
 8001280:	4313      	orrs	r3, r2
 8001282:	68a1      	ldr	r1, [r4, #8]
 8001284:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001288:	fa92 f2a2 	rbit	r2, r2
 800128c:	fab2 f282 	clz	r2, r2
 8001290:	fa01 f202 	lsl.w	r2, r1, r2
 8001294:	4313      	orrs	r3, r2
 8001296:	4a2d      	ldr	r2, [pc, #180]	; (800134c <HAL_RCCEx_PeriphCLKConfig+0x600>)
 8001298:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800129c:	4a2b      	ldr	r2, [pc, #172]	; (800134c <HAL_RCCEx_PeriphCLKConfig+0x600>)
 800129e:	6813      	ldr	r3, [r2, #0]
 80012a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012a4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80012a6:	f7ff f845 	bl	8000334 <HAL_GetTick>
 80012aa:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80012ac:	4b27      	ldr	r3, [pc, #156]	; (800134c <HAL_RCCEx_PeriphCLKConfig+0x600>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80012b4:	f47f aeb2 	bne.w	800101c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80012b8:	f7ff f83c 	bl	8000334 <HAL_GetTick>
 80012bc:	1b80      	subs	r0, r0, r6
 80012be:	2864      	cmp	r0, #100	; 0x64
 80012c0:	d9f4      	bls.n	80012ac <HAL_RCCEx_PeriphCLKConfig+0x560>
        return HAL_TIMEOUT;
 80012c2:	2003      	movs	r0, #3
 80012c4:	e6ae      	b.n	8001024 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 80012c6:	4e21      	ldr	r6, [pc, #132]	; (800134c <HAL_RCCEx_PeriphCLKConfig+0x600>)
 80012c8:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 80012cc:	f403 3e40 	and.w	lr, r3, #196608	; 0x30000
 80012d0:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80012d4:	fa90 f3a0 	rbit	r3, r0
 80012d8:	fab3 f383 	clz	r3, r3
 80012dc:	fa2e fe03 	lsr.w	lr, lr, r3
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80012e0:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 80012e4:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80012e8:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 80012ec:	fa91 f3a1 	rbit	r3, r1
 80012f0:	fab3 f383 	clz	r3, r3
 80012f4:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80012f6:	6863      	ldr	r3, [r4, #4]
 80012f8:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 80012fc:	fa97 f7a7 	rbit	r7, r7
 8001300:	fab7 f787 	clz	r7, r7
 8001304:	40bb      	lsls	r3, r7
 8001306:	fa90 f0a0 	rbit	r0, r0
 800130a:	fab0 f080 	clz	r0, r0
 800130e:	fa0e f000 	lsl.w	r0, lr, r0
 8001312:	4303      	orrs	r3, r0
 8001314:	68e7      	ldr	r7, [r4, #12]
 8001316:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 800131a:	fa90 f0a0 	rbit	r0, r0
 800131e:	fab0 f080 	clz	r0, r0
 8001322:	fa07 f000 	lsl.w	r0, r7, r0
 8001326:	4303      	orrs	r3, r0
 8001328:	fa91 f1a1 	rbit	r1, r1
 800132c:	fab1 f181 	clz	r1, r1
 8001330:	408a      	lsls	r2, r1
 8001332:	4313      	orrs	r3, r2
 8001334:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8001338:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 800133c:	f023 031f 	bic.w	r3, r3, #31
 8001340:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001342:	3a01      	subs	r2, #1
 8001344:	4313      	orrs	r3, r2
 8001346:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
 800134a:	e73e      	b.n	80011ca <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800134c:	40023800 	.word	0x40023800
 8001350:	40007000 	.word	0x40007000
 8001354:	0ffffcff 	.word	0x0ffffcff
    __HAL_RCC_PLLSAI_DISABLE(); 
 8001358:	4a7d      	ldr	r2, [pc, #500]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x804>)
 800135a:	6813      	ldr	r3, [r2, #0]
 800135c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001360:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001362:	f7fe ffe7 	bl	8000334 <HAL_GetTick>
 8001366:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001368:	4b79      	ldr	r3, [pc, #484]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x804>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001370:	d006      	beq.n	8001380 <HAL_RCCEx_PeriphCLKConfig+0x634>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001372:	f7fe ffdf 	bl	8000334 <HAL_GetTick>
 8001376:	1b40      	subs	r0, r0, r5
 8001378:	2864      	cmp	r0, #100	; 0x64
 800137a:	d9f5      	bls.n	8001368 <HAL_RCCEx_PeriphCLKConfig+0x61c>
        return HAL_TIMEOUT;
 800137c:	2003      	movs	r0, #3
 800137e:	e651      	b.n	8001024 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001380:	6823      	ldr	r3, [r4, #0]
 8001382:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001386:	d001      	beq.n	800138c <HAL_RCCEx_PeriphCLKConfig+0x640>
 8001388:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800138a:	b12a      	cbz	r2, 8001398 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800138c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001390:	d044      	beq.n	800141c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001392:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001394:	2b00      	cmp	r3, #0
 8001396:	d141      	bne.n	800141c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8001398:	4d6d      	ldr	r5, [pc, #436]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x804>)
 800139a:	f8d5 7088 	ldr.w	r7, [r5, #136]	; 0x88
 800139e:	f407 3740 	and.w	r7, r7, #196608	; 0x30000
 80013a2:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80013a6:	fa90 f3a0 	rbit	r3, r0
 80013aa:	fab3 f383 	clz	r3, r3
 80013ae:	40df      	lsrs	r7, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 80013b0:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 80013b4:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80013b8:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 80013bc:	fa91 f3a1 	rbit	r3, r1
 80013c0:	fab3 f383 	clz	r3, r3
 80013c4:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80013c6:	6963      	ldr	r3, [r4, #20]
 80013c8:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 80013cc:	fa96 f6a6 	rbit	r6, r6
 80013d0:	fab6 f686 	clz	r6, r6
 80013d4:	40b3      	lsls	r3, r6
 80013d6:	fa90 f0a0 	rbit	r0, r0
 80013da:	fab0 f080 	clz	r0, r0
 80013de:	fa07 f000 	lsl.w	r0, r7, r0
 80013e2:	4303      	orrs	r3, r0
 80013e4:	69a6      	ldr	r6, [r4, #24]
 80013e6:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 80013ea:	fa90 f0a0 	rbit	r0, r0
 80013ee:	fab0 f080 	clz	r0, r0
 80013f2:	fa06 f000 	lsl.w	r0, r6, r0
 80013f6:	4303      	orrs	r3, r0
 80013f8:	fa91 f1a1 	rbit	r1, r1
 80013fc:	fab1 f181 	clz	r1, r1
 8001400:	408a      	lsls	r2, r1
 8001402:	4313      	orrs	r3, r2
 8001404:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001408:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800140c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001410:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001412:	3a01      	subs	r2, #1
 8001414:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001418:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800141c:	6823      	ldr	r3, [r4, #0]
 800141e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001422:	d003      	beq.n	800142c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8001424:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800142a:	d056      	beq.n	80014da <HAL_RCCEx_PeriphCLKConfig+0x78e>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800142c:	6823      	ldr	r3, [r4, #0]
 800142e:	f013 0f08 	tst.w	r3, #8
 8001432:	d03e      	beq.n	80014b2 <HAL_RCCEx_PeriphCLKConfig+0x766>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8001434:	4d46      	ldr	r5, [pc, #280]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x804>)
 8001436:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 800143a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800143e:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8001442:	fa90 f3a0 	rbit	r3, r0
 8001446:	fab3 f383 	clz	r3, r3
 800144a:	40da      	lsrs	r2, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800144c:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 8001450:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8001454:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 8001458:	fa96 f3a6 	rbit	r3, r6
 800145c:	fab3 f383 	clz	r3, r3
 8001460:	40d9      	lsrs	r1, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001462:	6963      	ldr	r3, [r4, #20]
 8001464:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8001468:	fa97 f7a7 	rbit	r7, r7
 800146c:	fab7 f787 	clz	r7, r7
 8001470:	40bb      	lsls	r3, r7
 8001472:	fa96 f6a6 	rbit	r6, r6
 8001476:	fab6 f686 	clz	r6, r6
 800147a:	40b1      	lsls	r1, r6
 800147c:	430b      	orrs	r3, r1
 800147e:	fa90 f1a0 	rbit	r1, r0
 8001482:	fab1 f181 	clz	r1, r1
 8001486:	408a      	lsls	r2, r1
 8001488:	4313      	orrs	r3, r2
 800148a:	69e1      	ldr	r1, [r4, #28]
 800148c:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001490:	fa92 f2a2 	rbit	r2, r2
 8001494:	fab2 f282 	clz	r2, r2
 8001498:	fa01 f202 	lsl.w	r2, r1, r2
 800149c:	4313      	orrs	r3, r2
 800149e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80014a2:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80014a6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80014aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80014ac:	4313      	orrs	r3, r2
 80014ae:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 80014b2:	4a27      	ldr	r2, [pc, #156]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x804>)
 80014b4:	6813      	ldr	r3, [r2, #0]
 80014b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ba:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80014bc:	f7fe ff3a 	bl	8000334 <HAL_GetTick>
 80014c0:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80014c2:	4b23      	ldr	r3, [pc, #140]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x804>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80014ca:	d13e      	bne.n	800154a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80014cc:	f7fe ff32 	bl	8000334 <HAL_GetTick>
 80014d0:	1b00      	subs	r0, r0, r4
 80014d2:	2864      	cmp	r0, #100	; 0x64
 80014d4:	d9f5      	bls.n	80014c2 <HAL_RCCEx_PeriphCLKConfig+0x776>
        return HAL_TIMEOUT;
 80014d6:	2003      	movs	r0, #3
 80014d8:	e5a4      	b.n	8001024 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 80014da:	4e1d      	ldr	r6, [pc, #116]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x804>)
 80014dc:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
 80014e0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80014e4:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 80014e8:	fa95 f3a5 	rbit	r3, r5
 80014ec:	fab3 f383 	clz	r3, r3
 80014f0:	40d9      	lsrs	r1, r3
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 80014f2:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 80014f6:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80014fa:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 80014fe:	fa90 f3a0 	rbit	r3, r0
 8001502:	fab3 f383 	clz	r3, r3
 8001506:	40da      	lsrs	r2, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001508:	6963      	ldr	r3, [r4, #20]
 800150a:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 800150e:	fa97 f7a7 	rbit	r7, r7
 8001512:	fab7 f787 	clz	r7, r7
 8001516:	40bb      	lsls	r3, r7
 8001518:	6a27      	ldr	r7, [r4, #32]
 800151a:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
 800151e:	fa9e feae 	rbit	lr, lr
 8001522:	fabe fe8e 	clz	lr, lr
 8001526:	fa07 f70e 	lsl.w	r7, r7, lr
 800152a:	433b      	orrs	r3, r7
 800152c:	fa95 f5a5 	rbit	r5, r5
 8001530:	fab5 f585 	clz	r5, r5
 8001534:	40a9      	lsls	r1, r5
 8001536:	430b      	orrs	r3, r1
 8001538:	fa90 f1a0 	rbit	r1, r0
 800153c:	fab1 f181 	clz	r1, r1
 8001540:	408a      	lsls	r2, r1
 8001542:	4313      	orrs	r3, r2
 8001544:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
 8001548:	e770      	b.n	800142c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
  return HAL_OK;
 800154a:	2000      	movs	r0, #0
 800154c:	e56a      	b.n	8001024 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800

08001554 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001554:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001556:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001558:	6a04      	ldr	r4, [r0, #32]
 800155a:	f024 0401 	bic.w	r4, r4, #1
 800155e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001560:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001562:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8001566:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800156a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800156e:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001570:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001572:	6203      	str	r3, [r0, #32]
}
 8001574:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001578:	4770      	bx	lr

0800157a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800157a:	b410      	push	{r4}
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800157c:	6a03      	ldr	r3, [r0, #32]
 800157e:	f023 0310 	bic.w	r3, r3, #16
 8001582:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001584:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001586:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001588:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);
 800158c:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001590:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8001594:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001598:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800159a:	6203      	str	r3, [r0, #32]
}
 800159c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80015a2:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80015a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80015a8:	f041 0107 	orr.w	r1, r1, #7
 80015ac:	430b      	orrs	r3, r1
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80015ae:	6083      	str	r3, [r0, #8]
 80015b0:	4770      	bx	lr

080015b2 <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 80015b2:	2302      	movs	r3, #2
 80015b4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 80015b8:	6802      	ldr	r2, [r0, #0]
 80015ba:	6813      	ldr	r3, [r2, #0]
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 80015c2:	2301      	movs	r3, #1
 80015c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80015c8:	2000      	movs	r0, #0
 80015ca:	4770      	bx	lr

080015cc <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015cc:	6802      	ldr	r2, [r0, #0]
 80015ce:	68d3      	ldr	r3, [r2, #12]
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 80015d6:	6802      	ldr	r2, [r0, #0]
 80015d8:	6813      	ldr	r3, [r2, #0]
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	2000      	movs	r0, #0
 80015e2:	4770      	bx	lr

080015e4 <HAL_TIM_PeriodElapsedCallback>:
{
 80015e4:	4770      	bx	lr

080015e6 <HAL_TIM_OC_DelayElapsedCallback>:
{
 80015e6:	4770      	bx	lr

080015e8 <HAL_TIM_IC_CaptureCallback>:
{
 80015e8:	4770      	bx	lr

080015ea <HAL_TIM_PWM_PulseFinishedCallback>:
{
 80015ea:	4770      	bx	lr

080015ec <HAL_TIM_TriggerCallback>:
{
 80015ec:	4770      	bx	lr

080015ee <HAL_TIM_IRQHandler>:
{
 80015ee:	b510      	push	{r4, lr}
 80015f0:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015f2:	6803      	ldr	r3, [r0, #0]
 80015f4:	691a      	ldr	r2, [r3, #16]
 80015f6:	f012 0f02 	tst.w	r2, #2
 80015fa:	d011      	beq.n	8001620 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	f012 0f02 	tst.w	r2, #2
 8001602:	d00d      	beq.n	8001620 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001604:	f06f 0202 	mvn.w	r2, #2
 8001608:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800160a:	2301      	movs	r3, #1
 800160c:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800160e:	6803      	ldr	r3, [r0, #0]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f013 0f03 	tst.w	r3, #3
 8001616:	d079      	beq.n	800170c <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8001618:	f7ff ffe6 	bl	80015e8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800161c:	2300      	movs	r3, #0
 800161e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001620:	6823      	ldr	r3, [r4, #0]
 8001622:	691a      	ldr	r2, [r3, #16]
 8001624:	f012 0f04 	tst.w	r2, #4
 8001628:	d012      	beq.n	8001650 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	f012 0f04 	tst.w	r2, #4
 8001630:	d00e      	beq.n	8001650 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001632:	f06f 0204 	mvn.w	r2, #4
 8001636:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001638:	2302      	movs	r3, #2
 800163a:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001644:	d068      	beq.n	8001718 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001646:	4620      	mov	r0, r4
 8001648:	f7ff ffce 	bl	80015e8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800164c:	2300      	movs	r3, #0
 800164e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001650:	6823      	ldr	r3, [r4, #0]
 8001652:	691a      	ldr	r2, [r3, #16]
 8001654:	f012 0f08 	tst.w	r2, #8
 8001658:	d012      	beq.n	8001680 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	f012 0f08 	tst.w	r2, #8
 8001660:	d00e      	beq.n	8001680 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001662:	f06f 0208 	mvn.w	r2, #8
 8001666:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001668:	2304      	movs	r3, #4
 800166a:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800166c:	6823      	ldr	r3, [r4, #0]
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	f013 0f03 	tst.w	r3, #3
 8001674:	d057      	beq.n	8001726 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8001676:	4620      	mov	r0, r4
 8001678:	f7ff ffb6 	bl	80015e8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800167c:	2300      	movs	r3, #0
 800167e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001680:	6823      	ldr	r3, [r4, #0]
 8001682:	691a      	ldr	r2, [r3, #16]
 8001684:	f012 0f10 	tst.w	r2, #16
 8001688:	d012      	beq.n	80016b0 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	f012 0f10 	tst.w	r2, #16
 8001690:	d00e      	beq.n	80016b0 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001692:	f06f 0210 	mvn.w	r2, #16
 8001696:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001698:	2308      	movs	r3, #8
 800169a:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800169c:	6823      	ldr	r3, [r4, #0]
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80016a4:	d046      	beq.n	8001734 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80016a6:	4620      	mov	r0, r4
 80016a8:	f7ff ff9e 	bl	80015e8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ac:	2300      	movs	r3, #0
 80016ae:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016b0:	6823      	ldr	r3, [r4, #0]
 80016b2:	691a      	ldr	r2, [r3, #16]
 80016b4:	f012 0f01 	tst.w	r2, #1
 80016b8:	d003      	beq.n	80016c2 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80016ba:	68da      	ldr	r2, [r3, #12]
 80016bc:	f012 0f01 	tst.w	r2, #1
 80016c0:	d13f      	bne.n	8001742 <HAL_TIM_IRQHandler+0x154>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016c2:	6823      	ldr	r3, [r4, #0]
 80016c4:	691a      	ldr	r2, [r3, #16]
 80016c6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80016ca:	d003      	beq.n	80016d4 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	f012 0f80 	tst.w	r2, #128	; 0x80
 80016d2:	d13d      	bne.n	8001750 <HAL_TIM_IRQHandler+0x162>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	691a      	ldr	r2, [r3, #16]
 80016d8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80016dc:	d003      	beq.n	80016e6 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80016de:	68da      	ldr	r2, [r3, #12]
 80016e0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80016e4:	d13b      	bne.n	800175e <HAL_TIM_IRQHandler+0x170>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016e6:	6823      	ldr	r3, [r4, #0]
 80016e8:	691a      	ldr	r2, [r3, #16]
 80016ea:	f012 0f40 	tst.w	r2, #64	; 0x40
 80016ee:	d003      	beq.n	80016f8 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80016f6:	d139      	bne.n	800176c <HAL_TIM_IRQHandler+0x17e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016f8:	6823      	ldr	r3, [r4, #0]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	f012 0f20 	tst.w	r2, #32
 8001700:	d003      	beq.n	800170a <HAL_TIM_IRQHandler+0x11c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001702:	68da      	ldr	r2, [r3, #12]
 8001704:	f012 0f20 	tst.w	r2, #32
 8001708:	d137      	bne.n	800177a <HAL_TIM_IRQHandler+0x18c>
 800170a:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800170c:	f7ff ff6b 	bl	80015e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001710:	4620      	mov	r0, r4
 8001712:	f7ff ff6a 	bl	80015ea <HAL_TIM_PWM_PulseFinishedCallback>
 8001716:	e781      	b.n	800161c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001718:	4620      	mov	r0, r4
 800171a:	f7ff ff64 	bl	80015e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800171e:	4620      	mov	r0, r4
 8001720:	f7ff ff63 	bl	80015ea <HAL_TIM_PWM_PulseFinishedCallback>
 8001724:	e792      	b.n	800164c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001726:	4620      	mov	r0, r4
 8001728:	f7ff ff5d 	bl	80015e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800172c:	4620      	mov	r0, r4
 800172e:	f7ff ff5c 	bl	80015ea <HAL_TIM_PWM_PulseFinishedCallback>
 8001732:	e7a3      	b.n	800167c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001734:	4620      	mov	r0, r4
 8001736:	f7ff ff56 	bl	80015e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800173a:	4620      	mov	r0, r4
 800173c:	f7ff ff55 	bl	80015ea <HAL_TIM_PWM_PulseFinishedCallback>
 8001740:	e7b4      	b.n	80016ac <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001742:	f06f 0201 	mvn.w	r2, #1
 8001746:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001748:	4620      	mov	r0, r4
 800174a:	f7ff ff4b 	bl	80015e4 <HAL_TIM_PeriodElapsedCallback>
 800174e:	e7b8      	b.n	80016c2 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001750:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001754:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001756:	4620      	mov	r0, r4
 8001758:	f000 f993 	bl	8001a82 <HAL_TIMEx_BreakCallback>
 800175c:	e7ba      	b.n	80016d4 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800175e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001762:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001764:	4620      	mov	r0, r4
 8001766:	f000 f98c 	bl	8001a82 <HAL_TIMEx_BreakCallback>
 800176a:	e7bc      	b.n	80016e6 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800176c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001770:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001772:	4620      	mov	r0, r4
 8001774:	f7ff ff3a 	bl	80015ec <HAL_TIM_TriggerCallback>
 8001778:	e7be      	b.n	80016f8 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800177a:	f06f 0220 	mvn.w	r2, #32
 800177e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001780:	4620      	mov	r0, r4
 8001782:	f000 f97d 	bl	8001a80 <HAL_TIMEx_CommutationCallback>
}
 8001786:	e7c0      	b.n	800170a <HAL_TIM_IRQHandler+0x11c>

08001788 <TIM_Base_SetConfig>:
{
 8001788:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 800178a:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800178c:	4a47      	ldr	r2, [pc, #284]	; (80018ac <TIM_Base_SetConfig+0x124>)
 800178e:	4290      	cmp	r0, r2
 8001790:	bf14      	ite	ne
 8001792:	2200      	movne	r2, #0
 8001794:	2201      	moveq	r2, #1
 8001796:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800179a:	bf14      	ite	ne
 800179c:	4614      	movne	r4, r2
 800179e:	f042 0401 	orreq.w	r4, r2, #1
 80017a2:	b9d4      	cbnz	r4, 80017da <TIM_Base_SetConfig+0x52>
 80017a4:	4d42      	ldr	r5, [pc, #264]	; (80018b0 <TIM_Base_SetConfig+0x128>)
 80017a6:	42a8      	cmp	r0, r5
 80017a8:	bf14      	ite	ne
 80017aa:	2500      	movne	r5, #0
 80017ac:	2501      	moveq	r5, #1
 80017ae:	4e41      	ldr	r6, [pc, #260]	; (80018b4 <TIM_Base_SetConfig+0x12c>)
 80017b0:	42b0      	cmp	r0, r6
 80017b2:	d054      	beq.n	800185e <TIM_Base_SetConfig+0xd6>
 80017b4:	2d00      	cmp	r5, #0
 80017b6:	d152      	bne.n	800185e <TIM_Base_SetConfig+0xd6>
 80017b8:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80017bc:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 80017c0:	42a8      	cmp	r0, r5
 80017c2:	bf14      	ite	ne
 80017c4:	2500      	movne	r5, #0
 80017c6:	2501      	moveq	r5, #1
 80017c8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80017cc:	42b0      	cmp	r0, r6
 80017ce:	d002      	beq.n	80017d6 <TIM_Base_SetConfig+0x4e>
 80017d0:	b90d      	cbnz	r5, 80017d6 <TIM_Base_SetConfig+0x4e>
 80017d2:	2500      	movs	r5, #0
 80017d4:	e002      	b.n	80017dc <TIM_Base_SetConfig+0x54>
 80017d6:	2501      	movs	r5, #1
 80017d8:	e000      	b.n	80017dc <TIM_Base_SetConfig+0x54>
 80017da:	2501      	movs	r5, #1
 80017dc:	b11d      	cbz	r5, 80017e6 <TIM_Base_SetConfig+0x5e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80017e2:	684d      	ldr	r5, [r1, #4]
 80017e4:	432b      	orrs	r3, r5
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80017e6:	2c00      	cmp	r4, #0
 80017e8:	d13d      	bne.n	8001866 <TIM_Base_SetConfig+0xde>
 80017ea:	4c31      	ldr	r4, [pc, #196]	; (80018b0 <TIM_Base_SetConfig+0x128>)
 80017ec:	42a0      	cmp	r0, r4
 80017ee:	bf14      	ite	ne
 80017f0:	2400      	movne	r4, #0
 80017f2:	2401      	moveq	r4, #1
 80017f4:	4d2f      	ldr	r5, [pc, #188]	; (80018b4 <TIM_Base_SetConfig+0x12c>)
 80017f6:	42a8      	cmp	r0, r5
 80017f8:	d050      	beq.n	800189c <TIM_Base_SetConfig+0x114>
 80017fa:	2c00      	cmp	r4, #0
 80017fc:	d14e      	bne.n	800189c <TIM_Base_SetConfig+0x114>
 80017fe:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001802:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
 8001806:	42a0      	cmp	r0, r4
 8001808:	bf14      	ite	ne
 800180a:	2400      	movne	r4, #0
 800180c:	2401      	moveq	r4, #1
 800180e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001812:	42a8      	cmp	r0, r5
 8001814:	d044      	beq.n	80018a0 <TIM_Base_SetConfig+0x118>
 8001816:	2c00      	cmp	r4, #0
 8001818:	d142      	bne.n	80018a0 <TIM_Base_SetConfig+0x118>
 800181a:	4c27      	ldr	r4, [pc, #156]	; (80018b8 <TIM_Base_SetConfig+0x130>)
 800181c:	42a0      	cmp	r0, r4
 800181e:	bf14      	ite	ne
 8001820:	2400      	movne	r4, #0
 8001822:	2401      	moveq	r4, #1
 8001824:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8001828:	42a8      	cmp	r0, r5
 800182a:	d03b      	beq.n	80018a4 <TIM_Base_SetConfig+0x11c>
 800182c:	2c00      	cmp	r4, #0
 800182e:	d139      	bne.n	80018a4 <TIM_Base_SetConfig+0x11c>
 8001830:	4c22      	ldr	r4, [pc, #136]	; (80018bc <TIM_Base_SetConfig+0x134>)
 8001832:	42a0      	cmp	r0, r4
 8001834:	bf14      	ite	ne
 8001836:	2400      	movne	r4, #0
 8001838:	2401      	moveq	r4, #1
 800183a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800183e:	42a8      	cmp	r0, r5
 8001840:	d032      	beq.n	80018a8 <TIM_Base_SetConfig+0x120>
 8001842:	2c00      	cmp	r4, #0
 8001844:	d130      	bne.n	80018a8 <TIM_Base_SetConfig+0x120>
 8001846:	4c1e      	ldr	r4, [pc, #120]	; (80018c0 <TIM_Base_SetConfig+0x138>)
 8001848:	42a0      	cmp	r0, r4
 800184a:	bf14      	ite	ne
 800184c:	2400      	movne	r4, #0
 800184e:	2401      	moveq	r4, #1
 8001850:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
 8001854:	42a8      	cmp	r0, r5
 8001856:	d004      	beq.n	8001862 <TIM_Base_SetConfig+0xda>
 8001858:	b91c      	cbnz	r4, 8001862 <TIM_Base_SetConfig+0xda>
 800185a:	2400      	movs	r4, #0
 800185c:	e004      	b.n	8001868 <TIM_Base_SetConfig+0xe0>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800185e:	2501      	movs	r5, #1
 8001860:	e7bc      	b.n	80017dc <TIM_Base_SetConfig+0x54>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001862:	2401      	movs	r4, #1
 8001864:	e000      	b.n	8001868 <TIM_Base_SetConfig+0xe0>
 8001866:	2401      	movs	r4, #1
 8001868:	b11c      	cbz	r4, 8001872 <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~TIM_CR1_CKD;
 800186a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800186e:	68cc      	ldr	r4, [r1, #12]
 8001870:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001876:	694c      	ldr	r4, [r1, #20]
 8001878:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 800187a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800187c:	688b      	ldr	r3, [r1, #8]
 800187e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001880:	680b      	ldr	r3, [r1, #0]
 8001882:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <TIM_Base_SetConfig+0x13c>)
 8001886:	4298      	cmp	r0, r3
 8001888:	bf08      	it	eq
 800188a:	f042 0201 	orreq.w	r2, r2, #1
 800188e:	b10a      	cbz	r2, 8001894 <TIM_Base_SetConfig+0x10c>
    TIMx->RCR = Structure->RepetitionCounter;
 8001890:	690b      	ldr	r3, [r1, #16]
 8001892:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001894:	2301      	movs	r3, #1
 8001896:	6143      	str	r3, [r0, #20]
}
 8001898:	bc70      	pop	{r4, r5, r6}
 800189a:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800189c:	2401      	movs	r4, #1
 800189e:	e7e3      	b.n	8001868 <TIM_Base_SetConfig+0xe0>
 80018a0:	2401      	movs	r4, #1
 80018a2:	e7e1      	b.n	8001868 <TIM_Base_SetConfig+0xe0>
 80018a4:	2401      	movs	r4, #1
 80018a6:	e7df      	b.n	8001868 <TIM_Base_SetConfig+0xe0>
 80018a8:	2401      	movs	r4, #1
 80018aa:	e7dd      	b.n	8001868 <TIM_Base_SetConfig+0xe0>
 80018ac:	40010000 	.word	0x40010000
 80018b0:	40000800 	.word	0x40000800
 80018b4:	40000400 	.word	0x40000400
 80018b8:	40014400 	.word	0x40014400
 80018bc:	40001800 	.word	0x40001800
 80018c0:	40002000 	.word	0x40002000
 80018c4:	40010400 	.word	0x40010400

080018c8 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 80018c8:	b1a8      	cbz	r0, 80018f6 <HAL_TIM_Base_Init+0x2e>
{ 
 80018ca:	b510      	push	{r4, lr}
 80018cc:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80018ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80018d2:	b15b      	cbz	r3, 80018ec <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80018d4:	2302      	movs	r3, #2
 80018d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80018da:	1d21      	adds	r1, r4, #4
 80018dc:	6820      	ldr	r0, [r4, #0]
 80018de:	f7ff ff53 	bl	8001788 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80018e2:	2301      	movs	r3, #1
 80018e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80018e8:	2000      	movs	r0, #0
 80018ea:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80018ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80018f0:	f000 fed8 	bl	80026a4 <HAL_TIM_Base_MspInit>
 80018f4:	e7ee      	b.n	80018d4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80018f6:	2001      	movs	r0, #1
 80018f8:	4770      	bx	lr

080018fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80018fa:	b410      	push	{r4}
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 80018fc:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80018fe:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001902:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001906:	4319      	orrs	r1, r3
 8001908:	430c      	orrs	r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800190a:	6084      	str	r4, [r0, #8]
} 
 800190c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001914:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001918:	2b01      	cmp	r3, #1
 800191a:	d07d      	beq.n	8001a18 <HAL_TIM_ConfigClockSource+0x104>
{
 800191c:	b510      	push	{r4, lr}
 800191e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001920:	2301      	movs	r3, #1
 8001922:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001926:	2302      	movs	r3, #2
 8001928:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800192c:	6802      	ldr	r2, [r0, #0]
 800192e:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001930:	4b3a      	ldr	r3, [pc, #232]	; (8001a1c <HAL_TIM_ConfigClockSource+0x108>)
 8001932:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8001934:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001936:	680b      	ldr	r3, [r1, #0]
 8001938:	2b40      	cmp	r3, #64	; 0x40
 800193a:	d059      	beq.n	80019f0 <HAL_TIM_ConfigClockSource+0xdc>
 800193c:	d910      	bls.n	8001960 <HAL_TIM_ConfigClockSource+0x4c>
 800193e:	2b70      	cmp	r3, #112	; 0x70
 8001940:	d03e      	beq.n	80019c0 <HAL_TIM_ConfigClockSource+0xac>
 8001942:	d81f      	bhi.n	8001984 <HAL_TIM_ConfigClockSource+0x70>
 8001944:	2b50      	cmp	r3, #80	; 0x50
 8001946:	d049      	beq.n	80019dc <HAL_TIM_ConfigClockSource+0xc8>
 8001948:	2b60      	cmp	r3, #96	; 0x60
 800194a:	d132      	bne.n	80019b2 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800194c:	68ca      	ldr	r2, [r1, #12]
 800194e:	6849      	ldr	r1, [r1, #4]
 8001950:	6820      	ldr	r0, [r4, #0]
 8001952:	f7ff fe12 	bl	800157a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001956:	2160      	movs	r1, #96	; 0x60
 8001958:	6820      	ldr	r0, [r4, #0]
 800195a:	f7ff fe22 	bl	80015a2 <TIM_ITRx_SetConfig>
    break;
 800195e:	e028      	b.n	80019b2 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8001960:	2b10      	cmp	r3, #16
 8001962:	d04f      	beq.n	8001a04 <HAL_TIM_ConfigClockSource+0xf0>
 8001964:	d908      	bls.n	8001978 <HAL_TIM_ConfigClockSource+0x64>
 8001966:	2b20      	cmp	r3, #32
 8001968:	d051      	beq.n	8001a0e <HAL_TIM_ConfigClockSource+0xfa>
 800196a:	2b30      	cmp	r3, #48	; 0x30
 800196c:	d121      	bne.n	80019b2 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800196e:	2130      	movs	r1, #48	; 0x30
 8001970:	6820      	ldr	r0, [r4, #0]
 8001972:	f7ff fe16 	bl	80015a2 <TIM_ITRx_SetConfig>
    break;
 8001976:	e01c      	b.n	80019b2 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8001978:	b9db      	cbnz	r3, 80019b2 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800197a:	2100      	movs	r1, #0
 800197c:	6820      	ldr	r0, [r4, #0]
 800197e:	f7ff fe10 	bl	80015a2 <TIM_ITRx_SetConfig>
    break;
 8001982:	e016      	b.n	80019b2 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8001984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001988:	d00e      	beq.n	80019a8 <HAL_TIM_ConfigClockSource+0x94>
 800198a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800198e:	d110      	bne.n	80019b2 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ETR_SetConfig(htim->Instance, 
 8001990:	68cb      	ldr	r3, [r1, #12]
 8001992:	684a      	ldr	r2, [r1, #4]
 8001994:	6889      	ldr	r1, [r1, #8]
 8001996:	6820      	ldr	r0, [r4, #0]
 8001998:	f7ff ffaf 	bl	80018fa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800199c:	6822      	ldr	r2, [r4, #0]
 800199e:	6893      	ldr	r3, [r2, #8]
 80019a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a4:	6093      	str	r3, [r2, #8]
    break;
 80019a6:	e004      	b.n	80019b2 <HAL_TIM_ConfigClockSource+0x9e>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80019a8:	6822      	ldr	r2, [r4, #0]
 80019aa:	6891      	ldr	r1, [r2, #8]
 80019ac:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <HAL_TIM_ConfigClockSource+0x10c>)
 80019ae:	400b      	ands	r3, r1
 80019b0:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80019b2:	2301      	movs	r3, #1
 80019b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80019b8:	2000      	movs	r0, #0
 80019ba:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80019be:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance, 
 80019c0:	68cb      	ldr	r3, [r1, #12]
 80019c2:	684a      	ldr	r2, [r1, #4]
 80019c4:	6889      	ldr	r1, [r1, #8]
 80019c6:	6820      	ldr	r0, [r4, #0]
 80019c8:	f7ff ff97 	bl	80018fa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80019cc:	6822      	ldr	r2, [r4, #0]
 80019ce:	6891      	ldr	r1, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80019d0:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <HAL_TIM_ConfigClockSource+0x110>)
 80019d2:	400b      	ands	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80019d8:	6093      	str	r3, [r2, #8]
    break;
 80019da:	e7ea      	b.n	80019b2 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80019dc:	68ca      	ldr	r2, [r1, #12]
 80019de:	6849      	ldr	r1, [r1, #4]
 80019e0:	6820      	ldr	r0, [r4, #0]
 80019e2:	f7ff fdb7 	bl	8001554 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80019e6:	2150      	movs	r1, #80	; 0x50
 80019e8:	6820      	ldr	r0, [r4, #0]
 80019ea:	f7ff fdda 	bl	80015a2 <TIM_ITRx_SetConfig>
    break;
 80019ee:	e7e0      	b.n	80019b2 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80019f0:	68ca      	ldr	r2, [r1, #12]
 80019f2:	6849      	ldr	r1, [r1, #4]
 80019f4:	6820      	ldr	r0, [r4, #0]
 80019f6:	f7ff fdad 	bl	8001554 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80019fa:	2140      	movs	r1, #64	; 0x40
 80019fc:	6820      	ldr	r0, [r4, #0]
 80019fe:	f7ff fdd0 	bl	80015a2 <TIM_ITRx_SetConfig>
    break;
 8001a02:	e7d6      	b.n	80019b2 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001a04:	2110      	movs	r1, #16
 8001a06:	6820      	ldr	r0, [r4, #0]
 8001a08:	f7ff fdcb 	bl	80015a2 <TIM_ITRx_SetConfig>
    break;
 8001a0c:	e7d1      	b.n	80019b2 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001a0e:	2120      	movs	r1, #32
 8001a10:	6820      	ldr	r0, [r4, #0]
 8001a12:	f7ff fdc6 	bl	80015a2 <TIM_ITRx_SetConfig>
    break;
 8001a16:	e7cc      	b.n	80019b2 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8001a18:	2002      	movs	r0, #2
 8001a1a:	4770      	bx	lr
 8001a1c:	fffe0088 	.word	0xfffe0088
 8001a20:	fffefff8 	.word	0xfffefff8
 8001a24:	fffeff88 	.word	0xfffeff88

08001a28 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001a28:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d021      	beq.n	8001a74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
{
 8001a30:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8001a32:	2301      	movs	r3, #1
 8001a34:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001a38:	6804      	ldr	r4, [r0, #0]
 8001a3a:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001a3c:	68a2      	ldr	r2, [r4, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001a3e:	4d0e      	ldr	r5, [pc, #56]	; (8001a78 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8001a40:	4e0e      	ldr	r6, [pc, #56]	; (8001a7c <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8001a42:	42ac      	cmp	r4, r5
 8001a44:	bf18      	it	ne
 8001a46:	42b4      	cmpne	r4, r6
 8001a48:	d103      	bne.n	8001a52 <HAL_TIMEx_MasterConfigSynchronization+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001a4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001a4e:	684d      	ldr	r5, [r1, #4]
 8001a50:	432b      	orrs	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a56:	680d      	ldr	r5, [r1, #0]
 8001a58:	432b      	orrs	r3, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001a5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a5e:	6889      	ldr	r1, [r1, #8]
 8001a60:	430a      	orrs	r2, r1
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001a62:	6063      	str	r3, [r4, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001a64:	6803      	ldr	r3, [r0, #0]
 8001a66:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8001a6e:	4618      	mov	r0, r3
} 
 8001a70:	bc70      	pop	{r4, r5, r6}
 8001a72:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001a74:	2002      	movs	r0, #2
 8001a76:	4770      	bx	lr
 8001a78:	40010400 	.word	0x40010400
 8001a7c:	40010000 	.word	0x40010000

08001a80 <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8001a80:	4770      	bx	lr

08001a82 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a82:	4770      	bx	lr

08001a84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a88:	4605      	mov	r5, r0
 8001a8a:	460f      	mov	r7, r1
 8001a8c:	4616      	mov	r6, r2
 8001a8e:	4698      	mov	r8, r3
 8001a90:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a92:	682b      	ldr	r3, [r5, #0]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	ea37 0303 	bics.w	r3, r7, r3
 8001a9a:	bf0c      	ite	eq
 8001a9c:	2301      	moveq	r3, #1
 8001a9e:	2300      	movne	r3, #0
 8001aa0:	42b3      	cmp	r3, r6
 8001aa2:	d11e      	bne.n	8001ae2 <UART_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001aa4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001aa8:	d0f3      	beq.n	8001a92 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8001aaa:	b12c      	cbz	r4, 8001ab8 <UART_WaitOnFlagUntilTimeout+0x34>
 8001aac:	f7fe fc42 	bl	8000334 <HAL_GetTick>
 8001ab0:	eba0 0008 	sub.w	r0, r0, r8
 8001ab4:	4284      	cmp	r4, r0
 8001ab6:	d8ec      	bhi.n	8001a92 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ab8:	682a      	ldr	r2, [r5, #0]
 8001aba:	6813      	ldr	r3, [r2, #0]
 8001abc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001ac0:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ac2:	682a      	ldr	r2, [r5, #0]
 8001ac4:	6893      	ldr	r3, [r2, #8]
 8001ac6:	f023 0301 	bic.w	r3, r3, #1
 8001aca:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 8001acc:	2320      	movs	r3, #32
 8001ace:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001ad2:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
        return HAL_TIMEOUT;
 8001adc:	2003      	movs	r0, #3
 8001ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }
    }
  }
  return HAL_OK;
 8001ae2:	2000      	movs	r0, #0
}
 8001ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001ae8 <HAL_UART_Transmit>:
{
 8001ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001af0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b20      	cmp	r3, #32
 8001af8:	d004      	beq.n	8001b04 <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 8001afa:	2302      	movs	r3, #2
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	b002      	add	sp, #8
 8001b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b04:	4604      	mov	r4, r0
 8001b06:	460d      	mov	r5, r1
 8001b08:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0U))
 8001b0a:	2a00      	cmp	r2, #0
 8001b0c:	bf18      	it	ne
 8001b0e:	2900      	cmpne	r1, #0
 8001b10:	d04c      	beq.n	8001bac <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8001b12:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d101      	bne.n	8001b1e <HAL_UART_Transmit+0x36>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e7ee      	b.n	8001afc <HAL_UART_Transmit+0x14>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b28:	2321      	movs	r3, #33	; 0x21
 8001b2a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8001b2e:	f7fe fc01 	bl	8000334 <HAL_GetTick>
 8001b32:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001b34:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8001b38:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001b3c:	e003      	b.n	8001b46 <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001b3e:	6823      	ldr	r3, [r4, #0]
 8001b40:	782a      	ldrb	r2, [r5, #0]
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
 8001b44:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0U)
 8001b46:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	b1e3      	cbz	r3, 8001b88 <HAL_UART_Transmit+0xa0>
      huart->TxXferCount--;
 8001b4e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	3b01      	subs	r3, #1
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b5c:	9600      	str	r6, [sp, #0]
 8001b5e:	463b      	mov	r3, r7
 8001b60:	2200      	movs	r2, #0
 8001b62:	2180      	movs	r1, #128	; 0x80
 8001b64:	4620      	mov	r0, r4
 8001b66:	f7ff ff8d 	bl	8001a84 <UART_WaitOnFlagUntilTimeout>
 8001b6a:	bb08      	cbnz	r0, 8001bb0 <HAL_UART_Transmit+0xc8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b6c:	68a3      	ldr	r3, [r4, #8]
 8001b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b72:	d1e4      	bne.n	8001b3e <HAL_UART_Transmit+0x56>
 8001b74:	6923      	ldr	r3, [r4, #16]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1e1      	bne.n	8001b3e <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001b7a:	6822      	ldr	r2, [r4, #0]
 8001b7c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b84:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
 8001b86:	e7de      	b.n	8001b46 <HAL_UART_Transmit+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b88:	9600      	str	r6, [sp, #0]
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2140      	movs	r1, #64	; 0x40
 8001b90:	4620      	mov	r0, r4
 8001b92:	f7ff ff77 	bl	8001a84 <UART_WaitOnFlagUntilTimeout>
 8001b96:	4603      	mov	r3, r0
 8001b98:	b108      	cbz	r0, 8001b9e <HAL_UART_Transmit+0xb6>
      return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e7ae      	b.n	8001afc <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    return HAL_OK;
 8001baa:	e7a7      	b.n	8001afc <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e7a5      	b.n	8001afc <HAL_UART_Transmit+0x14>
        return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e7a3      	b.n	8001afc <HAL_UART_Transmit+0x14>

08001bb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bb4:	b538      	push	{r3, r4, r5, lr}
 8001bb6:	4604      	mov	r4, r0
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001bb8:	6883      	ldr	r3, [r0, #8]
 8001bba:	6902      	ldr	r2, [r0, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	6942      	ldr	r2, [r0, #20]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	69c2      	ldr	r2, [r0, #28]
 8001bc4:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001bc6:	6801      	ldr	r1, [r0, #0]
 8001bc8:	6808      	ldr	r0, [r1, #0]
 8001bca:	4aa0      	ldr	r2, [pc, #640]	; (8001e4c <UART_SetConfig+0x298>)
 8001bcc:	4002      	ands	r2, r0
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bd2:	6822      	ldr	r2, [r4, #0]
 8001bd4:	6853      	ldr	r3, [r2, #4]
 8001bd6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bda:	68e1      	ldr	r1, [r4, #12]
 8001bdc:	430b      	orrs	r3, r1
 8001bde:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001be0:	69a3      	ldr	r3, [r4, #24]
 8001be2:	6a22      	ldr	r2, [r4, #32]
 8001be4:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001be6:	6821      	ldr	r1, [r4, #0]
 8001be8:	688a      	ldr	r2, [r1, #8]
 8001bea:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	608b      	str	r3, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bf2:	6825      	ldr	r5, [r4, #0]
 8001bf4:	4b96      	ldr	r3, [pc, #600]	; (8001e50 <UART_SetConfig+0x29c>)
 8001bf6:	429d      	cmp	r5, r3
 8001bf8:	d02b      	beq.n	8001c52 <UART_SetConfig+0x9e>
 8001bfa:	4b96      	ldr	r3, [pc, #600]	; (8001e54 <UART_SetConfig+0x2a0>)
 8001bfc:	429d      	cmp	r5, r3
 8001bfe:	d03c      	beq.n	8001c7a <UART_SetConfig+0xc6>
 8001c00:	4b95      	ldr	r3, [pc, #596]	; (8001e58 <UART_SetConfig+0x2a4>)
 8001c02:	429d      	cmp	r5, r3
 8001c04:	d052      	beq.n	8001cac <UART_SetConfig+0xf8>
 8001c06:	4b95      	ldr	r3, [pc, #596]	; (8001e5c <UART_SetConfig+0x2a8>)
 8001c08:	429d      	cmp	r5, r3
 8001c0a:	d067      	beq.n	8001cdc <UART_SetConfig+0x128>
 8001c0c:	4b94      	ldr	r3, [pc, #592]	; (8001e60 <UART_SetConfig+0x2ac>)
 8001c0e:	429d      	cmp	r5, r3
 8001c10:	d07c      	beq.n	8001d0c <UART_SetConfig+0x158>
 8001c12:	4b94      	ldr	r3, [pc, #592]	; (8001e64 <UART_SetConfig+0x2b0>)
 8001c14:	429d      	cmp	r5, r3
 8001c16:	f000 8094 	beq.w	8001d42 <UART_SetConfig+0x18e>
 8001c1a:	4b93      	ldr	r3, [pc, #588]	; (8001e68 <UART_SetConfig+0x2b4>)
 8001c1c:	429d      	cmp	r5, r3
 8001c1e:	f000 80ab 	beq.w	8001d78 <UART_SetConfig+0x1c4>
 8001c22:	4b92      	ldr	r3, [pc, #584]	; (8001e6c <UART_SetConfig+0x2b8>)
 8001c24:	429d      	cmp	r5, r3
 8001c26:	f000 80c2 	beq.w	8001dae <UART_SetConfig+0x1fa>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001c2a:	2310      	movs	r3, #16

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c2c:	69e2      	ldr	r2, [r4, #28]
 8001c2e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001c32:	f000 80db 	beq.w	8001dec <UART_SetConfig+0x238>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	f200 8168 	bhi.w	8001f0c <UART_SetConfig+0x358>
 8001c3c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001c40:	013c0131 	.word	0x013c0131
 8001c44:	01660147 	.word	0x01660147
 8001c48:	01660151 	.word	0x01660151
 8001c4c:	01660166 	.word	0x01660166
 8001c50:	015c      	.short	0x015c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c52:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8001c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d803      	bhi.n	8001c6a <UART_SetConfig+0xb6>
 8001c62:	e8df f003 	tbb	[pc, r3]
 8001c66:	06bf      	.short	0x06bf
 8001c68:	0804      	.short	0x0804
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001c6a:	2310      	movs	r3, #16
 8001c6c:	e7de      	b.n	8001c2c <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e7dc      	b.n	8001c2c <UART_SetConfig+0x78>
 8001c72:	2304      	movs	r3, #4
 8001c74:	e7da      	b.n	8001c2c <UART_SetConfig+0x78>
 8001c76:	2308      	movs	r3, #8
 8001c78:	e7d8      	b.n	8001c2c <UART_SetConfig+0x78>
 8001c7a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b0c      	cmp	r3, #12
 8001c88:	d808      	bhi.n	8001c9c <UART_SetConfig+0xe8>
 8001c8a:	e8df f003 	tbb	[pc, r3]
 8001c8e:	07ad      	.short	0x07ad
 8001c90:	070b0707 	.word	0x070b0707
 8001c94:	07090707 	.word	0x07090707
 8001c98:	0707      	.short	0x0707
 8001c9a:	0d          	.byte	0x0d
 8001c9b:	00          	.byte	0x00
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001c9c:	2310      	movs	r3, #16
 8001c9e:	e7c5      	b.n	8001c2c <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e7c3      	b.n	8001c2c <UART_SetConfig+0x78>
 8001ca4:	2304      	movs	r3, #4
 8001ca6:	e7c1      	b.n	8001c2c <UART_SetConfig+0x78>
 8001ca8:	2308      	movs	r3, #8
 8001caa:	e7bf      	b.n	8001c2c <UART_SetConfig+0x78>
 8001cac:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8001cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001cb8:	2b10      	cmp	r3, #16
 8001cba:	d00d      	beq.n	8001cd8 <UART_SetConfig+0x124>
 8001cbc:	d905      	bls.n	8001cca <UART_SetConfig+0x116>
 8001cbe:	2b20      	cmp	r3, #32
 8001cc0:	d008      	beq.n	8001cd4 <UART_SetConfig+0x120>
 8001cc2:	2b30      	cmp	r3, #48	; 0x30
 8001cc4:	d104      	bne.n	8001cd0 <UART_SetConfig+0x11c>
 8001cc6:	2308      	movs	r3, #8
 8001cc8:	e7b0      	b.n	8001c2c <UART_SetConfig+0x78>
 8001cca:	b90b      	cbnz	r3, 8001cd0 <UART_SetConfig+0x11c>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	e7ad      	b.n	8001c2c <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001cd0:	2310      	movs	r3, #16
 8001cd2:	e7ab      	b.n	8001c2c <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e7a9      	b.n	8001c2c <UART_SetConfig+0x78>
 8001cd8:	2304      	movs	r3, #4
 8001cda:	e7a7      	b.n	8001c2c <UART_SetConfig+0x78>
 8001cdc:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8001ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001ce8:	2b40      	cmp	r3, #64	; 0x40
 8001cea:	d00d      	beq.n	8001d08 <UART_SetConfig+0x154>
 8001cec:	d905      	bls.n	8001cfa <UART_SetConfig+0x146>
 8001cee:	2b80      	cmp	r3, #128	; 0x80
 8001cf0:	d008      	beq.n	8001d04 <UART_SetConfig+0x150>
 8001cf2:	2bc0      	cmp	r3, #192	; 0xc0
 8001cf4:	d104      	bne.n	8001d00 <UART_SetConfig+0x14c>
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	e798      	b.n	8001c2c <UART_SetConfig+0x78>
 8001cfa:	b90b      	cbnz	r3, 8001d00 <UART_SetConfig+0x14c>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	e795      	b.n	8001c2c <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001d00:	2310      	movs	r3, #16
 8001d02:	e793      	b.n	8001c2c <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d04:	2302      	movs	r3, #2
 8001d06:	e791      	b.n	8001c2c <UART_SetConfig+0x78>
 8001d08:	2304      	movs	r3, #4
 8001d0a:	e78f      	b.n	8001c2c <UART_SetConfig+0x78>
 8001d0c:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 8001d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d1c:	d00f      	beq.n	8001d3e <UART_SetConfig+0x18a>
 8001d1e:	d907      	bls.n	8001d30 <UART_SetConfig+0x17c>
 8001d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d24:	d009      	beq.n	8001d3a <UART_SetConfig+0x186>
 8001d26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d2a:	d104      	bne.n	8001d36 <UART_SetConfig+0x182>
 8001d2c:	2308      	movs	r3, #8
 8001d2e:	e77d      	b.n	8001c2c <UART_SetConfig+0x78>
 8001d30:	b90b      	cbnz	r3, 8001d36 <UART_SetConfig+0x182>
 8001d32:	2300      	movs	r3, #0
 8001d34:	e77a      	b.n	8001c2c <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001d36:	2310      	movs	r3, #16
 8001d38:	e778      	b.n	8001c2c <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e776      	b.n	8001c2c <UART_SetConfig+0x78>
 8001d3e:	2304      	movs	r3, #4
 8001d40:	e774      	b.n	8001c2c <UART_SetConfig+0x78>
 8001d42:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 8001d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d52:	d00f      	beq.n	8001d74 <UART_SetConfig+0x1c0>
 8001d54:	d907      	bls.n	8001d66 <UART_SetConfig+0x1b2>
 8001d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d5a:	d009      	beq.n	8001d70 <UART_SetConfig+0x1bc>
 8001d5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001d60:	d104      	bne.n	8001d6c <UART_SetConfig+0x1b8>
 8001d62:	2308      	movs	r3, #8
 8001d64:	e762      	b.n	8001c2c <UART_SetConfig+0x78>
 8001d66:	b90b      	cbnz	r3, 8001d6c <UART_SetConfig+0x1b8>
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e75f      	b.n	8001c2c <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001d6c:	2310      	movs	r3, #16
 8001d6e:	e75d      	b.n	8001c2c <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d70:	2302      	movs	r3, #2
 8001d72:	e75b      	b.n	8001c2c <UART_SetConfig+0x78>
 8001d74:	2304      	movs	r3, #4
 8001d76:	e759      	b.n	8001c2c <UART_SetConfig+0x78>
 8001d78:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8001d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d80:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d88:	d00f      	beq.n	8001daa <UART_SetConfig+0x1f6>
 8001d8a:	d907      	bls.n	8001d9c <UART_SetConfig+0x1e8>
 8001d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d90:	d009      	beq.n	8001da6 <UART_SetConfig+0x1f2>
 8001d92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001d96:	d104      	bne.n	8001da2 <UART_SetConfig+0x1ee>
 8001d98:	2308      	movs	r3, #8
 8001d9a:	e747      	b.n	8001c2c <UART_SetConfig+0x78>
 8001d9c:	b90b      	cbnz	r3, 8001da2 <UART_SetConfig+0x1ee>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e744      	b.n	8001c2c <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001da2:	2310      	movs	r3, #16
 8001da4:	e742      	b.n	8001c2c <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001da6:	2302      	movs	r3, #2
 8001da8:	e740      	b.n	8001c2c <UART_SetConfig+0x78>
 8001daa:	2304      	movs	r3, #4
 8001dac:	e73e      	b.n	8001c2c <UART_SetConfig+0x78>
 8001dae:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
 8001db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dbe:	d00f      	beq.n	8001de0 <UART_SetConfig+0x22c>
 8001dc0:	d907      	bls.n	8001dd2 <UART_SetConfig+0x21e>
 8001dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dc6:	d009      	beq.n	8001ddc <UART_SetConfig+0x228>
 8001dc8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001dcc:	d104      	bne.n	8001dd8 <UART_SetConfig+0x224>
 8001dce:	2308      	movs	r3, #8
 8001dd0:	e72c      	b.n	8001c2c <UART_SetConfig+0x78>
 8001dd2:	b90b      	cbnz	r3, 8001dd8 <UART_SetConfig+0x224>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	e729      	b.n	8001c2c <UART_SetConfig+0x78>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001dd8:	2310      	movs	r3, #16
 8001dda:	e727      	b.n	8001c2c <UART_SetConfig+0x78>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e725      	b.n	8001c2c <UART_SetConfig+0x78>
 8001de0:	2304      	movs	r3, #4
 8001de2:	e723      	b.n	8001c2c <UART_SetConfig+0x78>
 8001de4:	2301      	movs	r3, #1
 8001de6:	e721      	b.n	8001c2c <UART_SetConfig+0x78>
 8001de8:	2300      	movs	r3, #0
 8001dea:	e71f      	b.n	8001c2c <UART_SetConfig+0x78>
    switch (clocksource)
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d855      	bhi.n	8001e9c <UART_SetConfig+0x2e8>
 8001df0:	e8df f003 	tbb	[pc, r3]
 8001df4:	54221705 	.word	0x54221705
 8001df8:	54545440 	.word	0x54545440
 8001dfc:	4b          	.byte	0x4b
 8001dfd:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001dfe:	f7fe ff79 	bl	8000cf4 <HAL_RCC_GetPCLK1Freq>
 8001e02:	6862      	ldr	r2, [r4, #4]
 8001e04:	0853      	lsrs	r3, r2, #1
 8001e06:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001e0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e0e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e10:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001e12:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e16:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001e1a:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 8001e1c:	6822      	ldr	r2, [r4, #0]
 8001e1e:	60d3      	str	r3, [r2, #12]
 8001e20:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001e22:	f7fe ff7d 	bl	8000d20 <HAL_RCC_GetPCLK2Freq>
 8001e26:	6862      	ldr	r2, [r4, #4]
 8001e28:	0853      	lsrs	r3, r2, #1
 8001e2a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001e2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e32:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e34:	2000      	movs	r0, #0
      break;
 8001e36:	e7ec      	b.n	8001e12 <UART_SetConfig+0x25e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001e38:	6862      	ldr	r2, [r4, #4]
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <UART_SetConfig+0x2bc>)
 8001e3c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001e40:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e44:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e46:	2000      	movs	r0, #0
      break;
 8001e48:	e7e3      	b.n	8001e12 <UART_SetConfig+0x25e>
 8001e4a:	bf00      	nop
 8001e4c:	efff69f3 	.word	0xefff69f3
 8001e50:	40011000 	.word	0x40011000
 8001e54:	40004400 	.word	0x40004400
 8001e58:	40004800 	.word	0x40004800
 8001e5c:	40004c00 	.word	0x40004c00
 8001e60:	40005000 	.word	0x40005000
 8001e64:	40011400 	.word	0x40011400
 8001e68:	40007800 	.word	0x40007800
 8001e6c:	40007c00 	.word	0x40007c00
 8001e70:	01e84800 	.word	0x01e84800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001e74:	f7fe fe32 	bl	8000adc <HAL_RCC_GetSysClockFreq>
 8001e78:	6862      	ldr	r2, [r4, #4]
 8001e7a:	0853      	lsrs	r3, r2, #1
 8001e7c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001e80:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e84:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e86:	2000      	movs	r0, #0
      break;
 8001e88:	e7c3      	b.n	8001e12 <UART_SetConfig+0x25e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001e8a:	6862      	ldr	r2, [r4, #4]
 8001e8c:	0853      	lsrs	r3, r2, #1
 8001e8e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001e92:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e96:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e98:	2000      	movs	r0, #0
      break;
 8001e9a:	e7ba      	b.n	8001e12 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8001e9c:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e7b7      	b.n	8001e12 <UART_SetConfig+0x25e>
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001ea2:	f7fe ff27 	bl	8000cf4 <HAL_RCC_GetPCLK1Freq>
 8001ea6:	6863      	ldr	r3, [r4, #4]
 8001ea8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001eac:	fbb0 f0f3 	udiv	r0, r0, r3
 8001eb0:	b280      	uxth	r0, r0
 8001eb2:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001eb4:	2000      	movs	r0, #0
      break;
 8001eb6:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001eb8:	f7fe ff32 	bl	8000d20 <HAL_RCC_GetPCLK2Freq>
 8001ebc:	6863      	ldr	r3, [r4, #4]
 8001ebe:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001ec2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ec6:	b280      	uxth	r0, r0
 8001ec8:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001eca:	2000      	movs	r0, #0
      break;
 8001ecc:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001ece:	6862      	ldr	r2, [r4, #4]
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <UART_SetConfig+0x35c>)
 8001ed2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001ed6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ede:	2000      	movs	r0, #0
      break;
 8001ee0:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ee2:	f7fe fdfb 	bl	8000adc <HAL_RCC_GetSysClockFreq>
 8001ee6:	6863      	ldr	r3, [r4, #4]
 8001ee8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001eec:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ef0:	b280      	uxth	r0, r0
 8001ef2:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ef4:	2000      	movs	r0, #0
      break;
 8001ef6:	bd38      	pop	{r3, r4, r5, pc}
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001ef8:	6862      	ldr	r2, [r4, #4]
 8001efa:	0853      	lsrs	r3, r2, #1
 8001efc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001f00:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f08:	2000      	movs	r0, #0
      break;
 8001f0a:	bd38      	pop	{r3, r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8001f0c:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 8001f0e:	bd38      	pop	{r3, r4, r5, pc}
 8001f10:	00f42400 	.word	0x00f42400

08001f14 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f14:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f16:	f013 0f01 	tst.w	r3, #1
 8001f1a:	d006      	beq.n	8001f2a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f1c:	6802      	ldr	r2, [r0, #0]
 8001f1e:	6853      	ldr	r3, [r2, #4]
 8001f20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001f24:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001f26:	430b      	orrs	r3, r1
 8001f28:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f2a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f2c:	f013 0f02 	tst.w	r3, #2
 8001f30:	d006      	beq.n	8001f40 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001f32:	6802      	ldr	r2, [r0, #0]
 8001f34:	6853      	ldr	r3, [r2, #4]
 8001f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001f3c:	430b      	orrs	r3, r1
 8001f3e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001f40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f42:	f013 0f04 	tst.w	r3, #4
 8001f46:	d006      	beq.n	8001f56 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001f48:	6802      	ldr	r2, [r0, #0]
 8001f4a:	6853      	ldr	r3, [r2, #4]
 8001f4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f50:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001f52:	430b      	orrs	r3, r1
 8001f54:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001f56:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f58:	f013 0f08 	tst.w	r3, #8
 8001f5c:	d006      	beq.n	8001f6c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001f5e:	6802      	ldr	r2, [r0, #0]
 8001f60:	6853      	ldr	r3, [r2, #4]
 8001f62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001f66:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f6e:	f013 0f10 	tst.w	r3, #16
 8001f72:	d006      	beq.n	8001f82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f74:	6802      	ldr	r2, [r0, #0]
 8001f76:	6893      	ldr	r3, [r2, #8]
 8001f78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f7c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001f7e:	430b      	orrs	r3, r1
 8001f80:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f82:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f84:	f013 0f20 	tst.w	r3, #32
 8001f88:	d006      	beq.n	8001f98 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001f8a:	6802      	ldr	r2, [r0, #0]
 8001f8c:	6893      	ldr	r3, [r2, #8]
 8001f8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f92:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001f94:	430b      	orrs	r3, r1
 8001f96:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f98:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f9a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001f9e:	d00a      	beq.n	8001fb6 <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001fa0:	6802      	ldr	r2, [r0, #0]
 8001fa2:	6853      	ldr	r3, [r2, #4]
 8001fa4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001fa8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001faa:	430b      	orrs	r3, r1
 8001fac:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001fae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001fb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fb4:	d00b      	beq.n	8001fce <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001fb6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001fb8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001fbc:	d006      	beq.n	8001fcc <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001fbe:	6802      	ldr	r2, [r0, #0]
 8001fc0:	6853      	ldr	r3, [r2, #4]
 8001fc2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001fc6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	6053      	str	r3, [r2, #4]
 8001fcc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001fce:	6802      	ldr	r2, [r0, #0]
 8001fd0:	6853      	ldr	r3, [r2, #4]
 8001fd2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001fd6:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001fd8:	430b      	orrs	r3, r1
 8001fda:	6053      	str	r3, [r2, #4]
 8001fdc:	e7eb      	b.n	8001fb6 <UART_AdvFeatureConfig+0xa2>

08001fde <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001fde:	b510      	push	{r4, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001fe8:	f7fe f9a4 	bl	8000334 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001fec:	6822      	ldr	r2, [r4, #0]
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	f012 0f08 	tst.w	r2, #8
 8001ff4:	d109      	bne.n	800200a <UART_CheckIdleState+0x2c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8001ff6:	2320      	movs	r3, #32
 8001ff8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8001ffc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002000:	2000      	movs	r0, #0
 8002002:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

  return HAL_OK;
}
 8002006:	b002      	add	sp, #8
 8002008:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800200a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	4603      	mov	r3, r0
 8002012:	2200      	movs	r2, #0
 8002014:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002018:	4620      	mov	r0, r4
 800201a:	f7ff fd33 	bl	8001a84 <UART_WaitOnFlagUntilTimeout>
 800201e:	2800      	cmp	r0, #0
 8002020:	d0e9      	beq.n	8001ff6 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8002022:	2003      	movs	r0, #3
 8002024:	e7ef      	b.n	8002006 <UART_CheckIdleState+0x28>

08002026 <HAL_UART_Init>:
  if(huart == NULL)
 8002026:	b378      	cbz	r0, 8002088 <HAL_UART_Init+0x62>
{
 8002028:	b510      	push	{r4, lr}
 800202a:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 800202c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002030:	b30b      	cbz	r3, 8002076 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002032:	2324      	movs	r3, #36	; 0x24
 8002034:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002038:	6822      	ldr	r2, [r4, #0]
 800203a:	6813      	ldr	r3, [r2, #0]
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002042:	4620      	mov	r0, r4
 8002044:	f7ff fdb6 	bl	8001bb4 <UART_SetConfig>
 8002048:	2801      	cmp	r0, #1
 800204a:	d01f      	beq.n	800208c <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800204c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800204e:	b9bb      	cbnz	r3, 8002080 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002050:	6822      	ldr	r2, [r4, #0]
 8002052:	6853      	ldr	r3, [r2, #4]
 8002054:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002058:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800205a:	6822      	ldr	r2, [r4, #0]
 800205c:	6893      	ldr	r3, [r2, #8]
 800205e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002062:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002064:	6822      	ldr	r2, [r4, #0]
 8002066:	6813      	ldr	r3, [r2, #0]
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800206e:	4620      	mov	r0, r4
 8002070:	f7ff ffb5 	bl	8001fde <UART_CheckIdleState>
 8002074:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002076:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800207a:	f000 fb73 	bl	8002764 <HAL_UART_MspInit>
 800207e:	e7d8      	b.n	8002032 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8002080:	4620      	mov	r0, r4
 8002082:	f7ff ff47 	bl	8001f14 <UART_AdvFeatureConfig>
 8002086:	e7e3      	b.n	8002050 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8002088:	2001      	movs	r0, #1
 800208a:	4770      	bx	lr
}
 800208c:	bd10      	pop	{r4, pc}
	...

08002090 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
static void MX_GPIO_Init(void)
{
 8002090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002094:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002096:	4b63      	ldr	r3, [pc, #396]	; (8002224 <MX_GPIO_Init+0x194>)
 8002098:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800209a:	f042 0204 	orr.w	r2, r2, #4
 800209e:	631a      	str	r2, [r3, #48]	; 0x30
 80020a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020a2:	f002 0204 	and.w	r2, r2, #4
 80020a6:	9200      	str	r2, [sp, #0]
 80020a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020b0:	631a      	str	r2, [r3, #48]	; 0x30
 80020b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020b4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80020b8:	9201      	str	r2, [sp, #4]
 80020ba:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020be:	f042 0201 	orr.w	r2, r2, #1
 80020c2:	631a      	str	r2, [r3, #48]	; 0x30
 80020c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020c6:	f002 0201 	and.w	r2, r2, #1
 80020ca:	9202      	str	r2, [sp, #8]
 80020cc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020d0:	f042 0210 	orr.w	r2, r2, #16
 80020d4:	631a      	str	r2, [r3, #48]	; 0x30
 80020d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020d8:	f002 0210 	and.w	r2, r2, #16
 80020dc:	9203      	str	r2, [sp, #12]
 80020de:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020e2:	f042 0202 	orr.w	r2, r2, #2
 80020e6:	631a      	str	r2, [r3, #48]	; 0x30
 80020e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ea:	f002 0202 	and.w	r2, r2, #2
 80020ee:	9204      	str	r2, [sp, #16]
 80020f0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020f4:	f042 0208 	orr.w	r2, r2, #8
 80020f8:	631a      	str	r2, [r3, #48]	; 0x30
 80020fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020fc:	f002 0208 	and.w	r2, r2, #8
 8002100:	9205      	str	r2, [sp, #20]
 8002102:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002106:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800210a:	631a      	str	r2, [r3, #48]	; 0x30
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002112:	9306      	str	r3, [sp, #24]
 8002114:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002116:	f8df a118 	ldr.w	sl, [pc, #280]	; 8002230 <MX_GPIO_Init+0x1a0>
 800211a:	2200      	movs	r2, #0
 800211c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8002120:	4650      	mov	r0, sl
 8002122:	f7fe fa83 	bl	800062c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002126:	4f40      	ldr	r7, [pc, #256]	; (8002228 <MX_GPIO_Init+0x198>)
 8002128:	2200      	movs	r2, #0
 800212a:	2140      	movs	r1, #64	; 0x40
 800212c:	4638      	mov	r0, r7
 800212e:	f7fe fa7d 	bl	800062c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002132:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 8002136:	f8cd b01c 	str.w	fp, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800213a:	4b3c      	ldr	r3, [pc, #240]	; (800222c <MX_GPIO_Init+0x19c>)
 800213c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2400      	movs	r4, #0
 8002140:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002142:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8002234 <MX_GPIO_Init+0x1a4>
 8002146:	a907      	add	r1, sp, #28
 8002148:	4648      	mov	r0, r9
 800214a:	f7fe f981 	bl	8000450 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800214e:	2332      	movs	r3, #50	; 0x32
 8002150:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002152:	2602      	movs	r6, #2
 8002154:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002158:	2503      	movs	r5, #3
 800215a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800215c:	f04f 080b 	mov.w	r8, #11
 8002160:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002164:	a907      	add	r1, sp, #28
 8002166:	4648      	mov	r0, r9
 8002168:	f7fe f972 	bl	8000450 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800216c:	2386      	movs	r3, #134	; 0x86
 800216e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002170:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002174:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002176:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217a:	f5a9 6900 	sub.w	r9, r9, #2048	; 0x800
 800217e:	a907      	add	r1, sp, #28
 8002180:	4648      	mov	r0, r9
 8002182:	f7fe f965 	bl	8000450 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002186:	f8cd b01c 	str.w	fp, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002190:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002194:	a907      	add	r1, sp, #28
 8002196:	4650      	mov	r0, sl
 8002198:	f7fe f95a 	bl	8000450 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800219c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80021a0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a2:	f04f 0b01 	mov.w	fp, #1
 80021a6:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ae:	a907      	add	r1, sp, #28
 80021b0:	4650      	mov	r0, sl
 80021b2:	f7fe f94d 	bl	8000450 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG5 USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|USB_OverCurrent_Pin;
 80021b6:	23a0      	movs	r3, #160	; 0xa0
 80021b8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ba:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021be:	a907      	add	r1, sp, #28
 80021c0:	4638      	mov	r0, r7
 80021c2:	f7fe f945 	bl	8000450 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80021c6:	2340      	movs	r3, #64	; 0x40
 80021c8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ca:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80021d2:	a907      	add	r1, sp, #28
 80021d4:	4638      	mov	r0, r7
 80021d6:	f7fe f93b 	bl	8000450 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80021da:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80021de:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e4:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021e6:	230a      	movs	r3, #10
 80021e8:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ea:	a907      	add	r1, sp, #28
 80021ec:	4648      	mov	r0, r9
 80021ee:	f7fe f92f 	bl	8000450 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80021f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021f6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021f8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80021fc:	a907      	add	r1, sp, #28
 80021fe:	4648      	mov	r0, r9
 8002200:	f7fe f926 	bl	8000450 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002204:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002208:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002210:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002214:	a907      	add	r1, sp, #28
 8002216:	4638      	mov	r0, r7
 8002218:	f7fe f91a 	bl	8000450 <HAL_GPIO_Init>

}
 800221c:	b00d      	add	sp, #52	; 0x34
 800221e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800
 8002228:	40021800 	.word	0x40021800
 800222c:	10110000 	.word	0x10110000
 8002230:	40020400 	.word	0x40020400
 8002234:	40020800 	.word	0x40020800

08002238 <CounterClear>:
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/* Function to clear the contents of the counter char array used to store the
 * the character version of the unsigned 32 bit integer representing the external
 * pulse count per ms interval */
void CounterClear(char count[]){
	int i =0; ;
 8002238:	2300      	movs	r3, #0

	while (count[i] != '\0' )
 800223a:	e002      	b.n	8002242 <CounterClear+0xa>
	{

		count[i] = '\0' ;
 800223c:	2200      	movs	r2, #0
 800223e:	54c2      	strb	r2, [r0, r3]
		i++ ;
 8002240:	3301      	adds	r3, #1
	while (count[i] != '\0' )
 8002242:	5cc2      	ldrb	r2, [r0, r3]
 8002244:	2a00      	cmp	r2, #0
 8002246:	d1f9      	bne.n	800223c <CounterClear+0x4>
	}
}
 8002248:	4770      	bx	lr

0800224a <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 800224a:	e7fe      	b.n	800224a <_Error_Handler>

0800224c <MX_TIM3_Init>:
{
 800224c:	b500      	push	{lr}
 800224e:	b089      	sub	sp, #36	; 0x24
  htim3.Instance = TIM3;
 8002250:	4818      	ldr	r0, [pc, #96]	; (80022b4 <MX_TIM3_Init+0x68>)
 8002252:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <MX_TIM3_Init+0x6c>)
 8002254:	6003      	str	r3, [r0, #0]
  htim3.Init.Prescaler = 21600;
 8002256:	f245 4360 	movw	r3, #21600	; 0x5460
 800225a:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800225c:	2300      	movs	r3, #0
 800225e:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 4;
 8002260:	2204      	movs	r2, #4
 8002262:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002264:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002266:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002268:	f7ff fb2e 	bl	80018c8 <HAL_TIM_Base_Init>
 800226c:	b998      	cbnz	r0, 8002296 <MX_TIM3_Init+0x4a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800226e:	a908      	add	r1, sp, #32
 8002270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002274:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002278:	480e      	ldr	r0, [pc, #56]	; (80022b4 <MX_TIM3_Init+0x68>)
 800227a:	f7ff fb4b 	bl	8001914 <HAL_TIM_ConfigClockSource>
 800227e:	b978      	cbnz	r0, 80022a0 <MX_TIM3_Init+0x54>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002280:	2300      	movs	r3, #0
 8002282:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002284:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002286:	a901      	add	r1, sp, #4
 8002288:	480a      	ldr	r0, [pc, #40]	; (80022b4 <MX_TIM3_Init+0x68>)
 800228a:	f7ff fbcd 	bl	8001a28 <HAL_TIMEx_MasterConfigSynchronization>
 800228e:	b960      	cbnz	r0, 80022aa <MX_TIM3_Init+0x5e>
}
 8002290:	b009      	add	sp, #36	; 0x24
 8002292:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8002296:	f240 115b 	movw	r1, #347	; 0x15b
 800229a:	4808      	ldr	r0, [pc, #32]	; (80022bc <MX_TIM3_Init+0x70>)
 800229c:	f7ff ffd5 	bl	800224a <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80022a0:	f240 1161 	movw	r1, #353	; 0x161
 80022a4:	4805      	ldr	r0, [pc, #20]	; (80022bc <MX_TIM3_Init+0x70>)
 80022a6:	f7ff ffd0 	bl	800224a <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80022aa:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80022ae:	4803      	ldr	r0, [pc, #12]	; (80022bc <MX_TIM3_Init+0x70>)
 80022b0:	f7ff ffcb 	bl	800224a <_Error_Handler>
 80022b4:	20000194 	.word	0x20000194
 80022b8:	40000400 	.word	0x40000400
 80022bc:	08003184 	.word	0x08003184

080022c0 <MX_TIM1_Init>:
{
 80022c0:	b500      	push	{lr}
 80022c2:	b089      	sub	sp, #36	; 0x24
  htim1.Instance = TIM1;
 80022c4:	481a      	ldr	r0, [pc, #104]	; (8002330 <MX_TIM1_Init+0x70>)
 80022c6:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <MX_TIM1_Init+0x74>)
 80022c8:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ce:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 80022d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022d4:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d6:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80022d8:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022da:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022dc:	f7ff faf4 	bl	80018c8 <HAL_TIM_Base_Init>
 80022e0:	b9b8      	cbnz	r0, 8002312 <MX_TIM1_Init+0x52>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80022e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022e6:	9304      	str	r3, [sp, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80022e8:	2300      	movs	r3, #0
 80022ea:	9305      	str	r3, [sp, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80022ec:	9306      	str	r3, [sp, #24]
  sClockSourceConfig.ClockFilter = 0;
 80022ee:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022f0:	a904      	add	r1, sp, #16
 80022f2:	480f      	ldr	r0, [pc, #60]	; (8002330 <MX_TIM1_Init+0x70>)
 80022f4:	f7ff fb0e 	bl	8001914 <HAL_TIM_ConfigClockSource>
 80022f8:	b980      	cbnz	r0, 800231c <MX_TIM1_Init+0x5c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022fe:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002300:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002302:	a901      	add	r1, sp, #4
 8002304:	480a      	ldr	r0, [pc, #40]	; (8002330 <MX_TIM1_Init+0x70>)
 8002306:	f7ff fb8f 	bl	8001a28 <HAL_TIMEx_MasterConfigSynchronization>
 800230a:	b960      	cbnz	r0, 8002326 <MX_TIM1_Init+0x66>
}
 800230c:	b009      	add	sp, #36	; 0x24
 800230e:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 8002312:	f44f 719b 	mov.w	r1, #310	; 0x136
 8002316:	4808      	ldr	r0, [pc, #32]	; (8002338 <MX_TIM1_Init+0x78>)
 8002318:	f7ff ff97 	bl	800224a <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 800231c:	f240 113f 	movw	r1, #319	; 0x13f
 8002320:	4805      	ldr	r0, [pc, #20]	; (8002338 <MX_TIM1_Init+0x78>)
 8002322:	f7ff ff92 	bl	800224a <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 8002326:	f240 1147 	movw	r1, #327	; 0x147
 800232a:	4803      	ldr	r0, [pc, #12]	; (8002338 <MX_TIM1_Init+0x78>)
 800232c:	f7ff ff8d 	bl	800224a <_Error_Handler>
 8002330:	200001e4 	.word	0x200001e4
 8002334:	40010000 	.word	0x40010000
 8002338:	08003184 	.word	0x08003184

0800233c <MX_USART3_UART_Init>:
{
 800233c:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 800233e:	480c      	ldr	r0, [pc, #48]	; (8002370 <MX_USART3_UART_Init+0x34>)
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <MX_USART3_UART_Init+0x38>)
 8002342:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 9600;
 8002344:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002348:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800234a:	2300      	movs	r3, #0
 800234c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800234e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002350:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002352:	220c      	movs	r2, #12
 8002354:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002356:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002358:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800235a:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800235c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800235e:	f7ff fe62 	bl	8002026 <HAL_UART_Init>
 8002362:	b900      	cbnz	r0, 8002366 <MX_USART3_UART_Init+0x2a>
 8002364:	bd08      	pop	{r3, pc}
    _Error_Handler(__FILE__, __LINE__);
 8002366:	f240 11a3 	movw	r1, #419	; 0x1a3
 800236a:	4803      	ldr	r0, [pc, #12]	; (8002378 <MX_USART3_UART_Init+0x3c>)
 800236c:	f7ff ff6d 	bl	800224a <_Error_Handler>
 8002370:	20000120 	.word	0x20000120
 8002374:	40004800 	.word	0x40004800
 8002378:	08003184 	.word	0x08003184

0800237c <MX_TIM8_Init>:
{
 800237c:	b500      	push	{lr}
 800237e:	b089      	sub	sp, #36	; 0x24
  htim8.Instance = TIM8;
 8002380:	481a      	ldr	r0, [pc, #104]	; (80023ec <MX_TIM8_Init+0x70>)
 8002382:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <MX_TIM8_Init+0x74>)
 8002384:	6003      	str	r3, [r0, #0]
  htim8.Init.Prescaler = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	6043      	str	r3, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800238a:	6083      	str	r3, [r0, #8]
  htim8.Init.Period = 65535;
 800238c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002390:	60c2      	str	r2, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002392:	6103      	str	r3, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 8002394:	6143      	str	r3, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002396:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002398:	f7ff fa96 	bl	80018c8 <HAL_TIM_Base_Init>
 800239c:	b9b8      	cbnz	r0, 80023ce <MX_TIM8_Init+0x52>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800239e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023a2:	9304      	str	r3, [sp, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80023a4:	2300      	movs	r3, #0
 80023a6:	9305      	str	r3, [sp, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80023a8:	9306      	str	r3, [sp, #24]
  sClockSourceConfig.ClockFilter = 0;
 80023aa:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80023ac:	a904      	add	r1, sp, #16
 80023ae:	480f      	ldr	r0, [pc, #60]	; (80023ec <MX_TIM8_Init+0x70>)
 80023b0:	f7ff fab0 	bl	8001914 <HAL_TIM_ConfigClockSource>
 80023b4:	b980      	cbnz	r0, 80023d8 <MX_TIM8_Init+0x5c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b6:	2300      	movs	r3, #0
 80023b8:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023ba:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023bc:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80023be:	a901      	add	r1, sp, #4
 80023c0:	480a      	ldr	r0, [pc, #40]	; (80023ec <MX_TIM8_Init+0x70>)
 80023c2:	f7ff fb31 	bl	8001a28 <HAL_TIMEx_MasterConfigSynchronization>
 80023c6:	b960      	cbnz	r0, 80023e2 <MX_TIM8_Init+0x66>
}
 80023c8:	b009      	add	sp, #36	; 0x24
 80023ca:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80023ce:	f240 117d 	movw	r1, #381	; 0x17d
 80023d2:	4808      	ldr	r0, [pc, #32]	; (80023f4 <MX_TIM8_Init+0x78>)
 80023d4:	f7ff ff39 	bl	800224a <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80023d8:	f44f 71c3 	mov.w	r1, #390	; 0x186
 80023dc:	4805      	ldr	r0, [pc, #20]	; (80023f4 <MX_TIM8_Init+0x78>)
 80023de:	f7ff ff34 	bl	800224a <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80023e2:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 80023e6:	4803      	ldr	r0, [pc, #12]	; (80023f4 <MX_TIM8_Init+0x78>)
 80023e8:	f7ff ff2f 	bl	800224a <_Error_Handler>
 80023ec:	200000e0 	.word	0x200000e0
 80023f0:	40010400 	.word	0x40010400
 80023f4:	08003184 	.word	0x08003184

080023f8 <SystemClock_Config>:
{
 80023f8:	b500      	push	{lr}
 80023fa:	b0b9      	sub	sp, #228	; 0xe4
  __HAL_RCC_PWR_CLK_ENABLE();
 80023fc:	4b35      	ldr	r3, [pc, #212]	; (80024d4 <SystemClock_Config+0xdc>)
 80023fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002400:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002404:	641a      	str	r2, [r3, #64]	; 0x40
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002410:	4b31      	ldr	r3, [pc, #196]	; (80024d8 <SystemClock_Config+0xe0>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002420:	9301      	str	r3, [sp, #4]
 8002422:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002424:	2302      	movs	r3, #2
 8002426:	932b      	str	r3, [sp, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002428:	2201      	movs	r2, #1
 800242a:	922e      	str	r2, [sp, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800242c:	2210      	movs	r2, #16
 800242e:	922f      	str	r2, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002430:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002432:	2200      	movs	r2, #0
 8002434:	9232      	str	r2, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002436:	2208      	movs	r2, #8
 8002438:	9233      	str	r2, [sp, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 800243a:	22d8      	movs	r2, #216	; 0xd8
 800243c:	9234      	str	r2, [sp, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800243e:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002440:	9336      	str	r3, [sp, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002442:	a82b      	add	r0, sp, #172	; 0xac
 8002444:	f7fe f93a 	bl	80006bc <HAL_RCC_OscConfig>
 8002448:	bb80      	cbnz	r0, 80024ac <SystemClock_Config+0xb4>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800244a:	f7fe f8f9 	bl	8000640 <HAL_PWREx_EnableOverDrive>
 800244e:	bb88      	cbnz	r0, 80024b4 <SystemClock_Config+0xbc>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002450:	230f      	movs	r3, #15
 8002452:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002454:	2302      	movs	r3, #2
 8002456:	9327      	str	r3, [sp, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002458:	2300      	movs	r3, #0
 800245a:	9328      	str	r3, [sp, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800245c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002460:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002466:	932a      	str	r3, [sp, #168]	; 0xa8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002468:	2107      	movs	r1, #7
 800246a:	a826      	add	r0, sp, #152	; 0x98
 800246c:	f7fe fb7a 	bl	8000b64 <HAL_RCC_ClockConfig>
 8002470:	bb28      	cbnz	r0, 80024be <SystemClock_Config+0xc6>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002472:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002476:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002478:	2300      	movs	r3, #0
 800247a:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800247c:	a802      	add	r0, sp, #8
 800247e:	f7fe fc65 	bl	8000d4c <HAL_RCCEx_PeriphCLKConfig>
 8002482:	bb08      	cbnz	r0, 80024c8 <SystemClock_Config+0xd0>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002484:	f7fe fc30 	bl	8000ce8 <HAL_RCC_GetHCLKFreq>
 8002488:	4b14      	ldr	r3, [pc, #80]	; (80024dc <SystemClock_Config+0xe4>)
 800248a:	fba3 3000 	umull	r3, r0, r3, r0
 800248e:	0980      	lsrs	r0, r0, #6
 8002490:	f7fd ffb2 	bl	80003f8 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002494:	2004      	movs	r0, #4
 8002496:	f7fd ffc5 	bl	8000424 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800249a:	2200      	movs	r2, #0
 800249c:	4611      	mov	r1, r2
 800249e:	f04f 30ff 	mov.w	r0, #4294967295
 80024a2:	f7fd ff6d 	bl	8000380 <HAL_NVIC_SetPriority>
}
 80024a6:	b039      	add	sp, #228	; 0xe4
 80024a8:	f85d fb04 	ldr.w	pc, [sp], #4
    _Error_Handler(__FILE__, __LINE__);
 80024ac:	21fb      	movs	r1, #251	; 0xfb
 80024ae:	480c      	ldr	r0, [pc, #48]	; (80024e0 <SystemClock_Config+0xe8>)
 80024b0:	f7ff fecb 	bl	800224a <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80024b4:	f44f 7181 	mov.w	r1, #258	; 0x102
 80024b8:	4809      	ldr	r0, [pc, #36]	; (80024e0 <SystemClock_Config+0xe8>)
 80024ba:	f7ff fec6 	bl	800224a <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80024be:	f44f 7188 	mov.w	r1, #272	; 0x110
 80024c2:	4807      	ldr	r0, [pc, #28]	; (80024e0 <SystemClock_Config+0xe8>)
 80024c4:	f7ff fec1 	bl	800224a <_Error_Handler>
    _Error_Handler(__FILE__, __LINE__);
 80024c8:	f240 1117 	movw	r1, #279	; 0x117
 80024cc:	4804      	ldr	r0, [pc, #16]	; (80024e0 <SystemClock_Config+0xe8>)
 80024ce:	f7ff febc 	bl	800224a <_Error_Handler>
 80024d2:	bf00      	nop
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40007000 	.word	0x40007000
 80024dc:	10624dd3 	.word	0x10624dd3
 80024e0:	08003184 	.word	0x08003184

080024e4 <main>:
{
 80024e4:	b580      	push	{r7, lr}
  HAL_Init();
 80024e6:	f7fd ff11 	bl	800030c <HAL_Init>
  SystemClock_Config();
 80024ea:	f7ff ff85 	bl	80023f8 <SystemClock_Config>
  MX_GPIO_Init();
 80024ee:	f7ff fdcf 	bl	8002090 <MX_GPIO_Init>
  MX_TIM3_Init();
 80024f2:	f7ff feab 	bl	800224c <MX_TIM3_Init>
  MX_TIM1_Init();
 80024f6:	f7ff fee3 	bl	80022c0 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80024fa:	f7ff ff1f 	bl	800233c <MX_USART3_UART_Init>
  MX_TIM8_Init();
 80024fe:	f7ff ff3d 	bl	800237c <MX_TIM8_Init>
HAL_TIM_Base_Start_IT(&htim3);
 8002502:	4840      	ldr	r0, [pc, #256]	; (8002604 <main+0x120>)
 8002504:	f7ff f862 	bl	80015cc <HAL_TIM_Base_Start_IT>
HAL_TIM_Base_Start(&htim1);
 8002508:	483f      	ldr	r0, [pc, #252]	; (8002608 <main+0x124>)
 800250a:	f7ff f852 	bl	80015b2 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim8);
 800250e:	483f      	ldr	r0, [pc, #252]	; (800260c <main+0x128>)
 8002510:	f7ff f84f 	bl	80015b2 <HAL_TIM_Base_Start>
 8002514:	e010      	b.n	8002538 <main+0x54>
	    	   Channel1Send = CNT_DIF1 ;
 8002516:	4b3e      	ldr	r3, [pc, #248]	; (8002610 <main+0x12c>)
 8002518:	483e      	ldr	r0, [pc, #248]	; (8002614 <main+0x130>)
 800251a:	6800      	ldr	r0, [r0, #0]
 800251c:	6118      	str	r0, [r3, #16]
	    	   Channel2Send = CNT_DIF2 ;
 800251e:	483e      	ldr	r0, [pc, #248]	; (8002618 <main+0x134>)
 8002520:	6800      	ldr	r0, [r0, #0]
 8002522:	6158      	str	r0, [r3, #20]
	    	    CNT_P1 = CNT_C1 ;
 8002524:	6099      	str	r1, [r3, #8]
	    	    CNT_P2 = CNT_C2 ;
 8002526:	60da      	str	r2, [r3, #12]
	    	    msFlag = 0;
 8002528:	2200      	movs	r2, #0
 800252a:	4b3c      	ldr	r3, [pc, #240]	; (800261c <main+0x138>)
 800252c:	601a      	str	r2, [r3, #0]
 if(SecCount == 1000) // Code to print Count Data at 1s intervals via UART
 800252e:	4b3c      	ldr	r3, [pc, #240]	; (8002620 <main+0x13c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002536:	d026      	beq.n	8002586 <main+0xa2>
	      if(msFlag == 1){
 8002538:	4b38      	ldr	r3, [pc, #224]	; (800261c <main+0x138>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d1f6      	bne.n	800252e <main+0x4a>
	    	   HAL_GPIO_TogglePin( GPIOB ,LD3_Pin|LD2_Pin);
 8002540:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8002544:	4837      	ldr	r0, [pc, #220]	; (8002624 <main+0x140>)
 8002546:	f7fe f877 	bl	8000638 <HAL_GPIO_TogglePin>
	    	   CNT_C1 = GlobalCount1 ;
 800254a:	4b37      	ldr	r3, [pc, #220]	; (8002628 <main+0x144>)
 800254c:	6819      	ldr	r1, [r3, #0]
 800254e:	4b30      	ldr	r3, [pc, #192]	; (8002610 <main+0x12c>)
 8002550:	6019      	str	r1, [r3, #0]
	    	   CNT_C2 = GlobalCount2 ;
 8002552:	4a36      	ldr	r2, [pc, #216]	; (800262c <main+0x148>)
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	605a      	str	r2, [r3, #4]
	    	   CNT_DIF1 = CNT_C1 - CNT_P1 ;
 8002558:	6898      	ldr	r0, [r3, #8]
 800255a:	1a0d      	subs	r5, r1, r0
 800255c:	4c2d      	ldr	r4, [pc, #180]	; (8002614 <main+0x130>)
 800255e:	6025      	str	r5, [r4, #0]
	    	   CNT_DIF2 = CNT_C2 - CNT_P2 ;
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	1ad4      	subs	r4, r2, r3
 8002564:	4e2c      	ldr	r6, [pc, #176]	; (8002618 <main+0x134>)
 8002566:	6034      	str	r4, [r6, #0]
	    	   if(CNT_C1 < CNT_P1 )
 8002568:	4281      	cmp	r1, r0
 800256a:	d204      	bcs.n	8002576 <main+0x92>
	    	   CNT_DIF1 = (65535 - CNT_P1 )+ CNT_C1 ;
 800256c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002570:	4428      	add	r0, r5
 8002572:	4d28      	ldr	r5, [pc, #160]	; (8002614 <main+0x130>)
 8002574:	6028      	str	r0, [r5, #0]
	    	   if(CNT_C2 < CNT_P2 )
 8002576:	429a      	cmp	r2, r3
 8002578:	d2cd      	bcs.n	8002516 <main+0x32>
			   CNT_DIF2 = (65535 - CNT_P2 )+ CNT_C2 ;
 800257a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800257e:	4423      	add	r3, r4
 8002580:	4825      	ldr	r0, [pc, #148]	; (8002618 <main+0x134>)
 8002582:	6003      	str	r3, [r0, #0]
 8002584:	e7c7      	b.n	8002516 <main+0x32>
		 CounterClear(Counter1);
 8002586:	4e2a      	ldr	r6, [pc, #168]	; (8002630 <main+0x14c>)
 8002588:	4630      	mov	r0, r6
 800258a:	f7ff fe55 	bl	8002238 <CounterClear>
		 CounterClear(Counter2);
 800258e:	4d29      	ldr	r5, [pc, #164]	; (8002634 <main+0x150>)
 8002590:	4628      	mov	r0, r5
 8002592:	f7ff fe51 	bl	8002238 <CounterClear>
		 sprintf(Counter1, "%li", Channel1Send);
 8002596:	4f1e      	ldr	r7, [pc, #120]	; (8002610 <main+0x12c>)
 8002598:	4c27      	ldr	r4, [pc, #156]	; (8002638 <main+0x154>)
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4621      	mov	r1, r4
 800259e:	4630      	mov	r0, r6
 80025a0:	f000 f9ac 	bl	80028fc <siprintf>
		 sprintf(Counter2, "%li", Channel2Send);
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	4621      	mov	r1, r4
 80025a8:	4628      	mov	r0, r5
 80025aa:	f000 f9a7 	bl	80028fc <siprintf>
		 HAL_UART_Transmit( &huart3, Intro1 , 14, 14);
 80025ae:	4f23      	ldr	r7, [pc, #140]	; (800263c <main+0x158>)
 80025b0:	4c23      	ldr	r4, [pc, #140]	; (8002640 <main+0x15c>)
 80025b2:	230e      	movs	r3, #14
 80025b4:	461a      	mov	r2, r3
 80025b6:	4639      	mov	r1, r7
 80025b8:	4620      	mov	r0, r4
 80025ba:	f7ff fa95 	bl	8001ae8 <HAL_UART_Transmit>
		 HAL_Delay(5);
 80025be:	2005      	movs	r0, #5
 80025c0:	f7fd febe 	bl	8000340 <HAL_Delay>
		 HAL_UART_Transmit( &huart3, Counter1 , 10, 10);
 80025c4:	230a      	movs	r3, #10
 80025c6:	461a      	mov	r2, r3
 80025c8:	4631      	mov	r1, r6
 80025ca:	4620      	mov	r0, r4
 80025cc:	f7ff fa8c 	bl	8001ae8 <HAL_UART_Transmit>
		 HAL_Delay(5);
 80025d0:	2005      	movs	r0, #5
 80025d2:	f7fd feb5 	bl	8000340 <HAL_Delay>
		 HAL_UART_Transmit( &huart3, Intro2 , 14, 14);
 80025d6:	230e      	movs	r3, #14
 80025d8:	461a      	mov	r2, r3
 80025da:	f107 0110 	add.w	r1, r7, #16
 80025de:	4620      	mov	r0, r4
 80025e0:	f7ff fa82 	bl	8001ae8 <HAL_UART_Transmit>
		 HAL_Delay(5);
 80025e4:	2005      	movs	r0, #5
 80025e6:	f7fd feab 	bl	8000340 <HAL_Delay>
		 HAL_UART_Transmit( &huart3, Counter2 , 10, 10);
 80025ea:	230a      	movs	r3, #10
 80025ec:	461a      	mov	r2, r3
 80025ee:	4629      	mov	r1, r5
 80025f0:	4620      	mov	r0, r4
 80025f2:	f7ff fa79 	bl	8001ae8 <HAL_UART_Transmit>
		 HAL_Delay(5);
 80025f6:	2005      	movs	r0, #5
 80025f8:	f7fd fea2 	bl	8000340 <HAL_Delay>
		SecCount = 0 ; // Resetting the Per Second Ticker Variable
 80025fc:	2200      	movs	r2, #0
 80025fe:	4b08      	ldr	r3, [pc, #32]	; (8002620 <main+0x13c>)
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	e799      	b.n	8002538 <main+0x54>
 8002604:	20000194 	.word	0x20000194
 8002608:	200001e4 	.word	0x200001e4
 800260c:	200000e0 	.word	0x200000e0
 8002610:	200000a4 	.word	0x200000a4
 8002614:	20000190 	.word	0x20000190
 8002618:	200001d4 	.word	0x200001d4
 800261c:	200000c8 	.word	0x200000c8
 8002620:	200000c4 	.word	0x200000c4
 8002624:	40020400 	.word	0x40020400
 8002628:	200000dc 	.word	0x200000dc
 800262c:	20000224 	.word	0x20000224
 8002630:	200001d8 	.word	0x200001d8
 8002634:	20000228 	.word	0x20000228
 8002638:	08003194 	.word	0x08003194
 800263c:	20000000 	.word	0x20000000
 8002640:	20000120 	.word	0x20000120

08002644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002644:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002646:	2003      	movs	r0, #3
 8002648:	f7fd fe88 	bl	800035c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800264c:	2200      	movs	r2, #0
 800264e:	4611      	mov	r1, r2
 8002650:	f06f 000b 	mvn.w	r0, #11
 8002654:	f7fd fe94 	bl	8000380 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002658:	2200      	movs	r2, #0
 800265a:	4611      	mov	r1, r2
 800265c:	f06f 000a 	mvn.w	r0, #10
 8002660:	f7fd fe8e 	bl	8000380 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002664:	2200      	movs	r2, #0
 8002666:	4611      	mov	r1, r2
 8002668:	f06f 0009 	mvn.w	r0, #9
 800266c:	f7fd fe88 	bl	8000380 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002670:	2200      	movs	r2, #0
 8002672:	4611      	mov	r1, r2
 8002674:	f06f 0004 	mvn.w	r0, #4
 8002678:	f7fd fe82 	bl	8000380 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800267c:	2200      	movs	r2, #0
 800267e:	4611      	mov	r1, r2
 8002680:	f06f 0003 	mvn.w	r0, #3
 8002684:	f7fd fe7c 	bl	8000380 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002688:	2200      	movs	r2, #0
 800268a:	4611      	mov	r1, r2
 800268c:	f06f 0001 	mvn.w	r0, #1
 8002690:	f7fd fe76 	bl	8000380 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002694:	2200      	movs	r2, #0
 8002696:	4611      	mov	r1, r2
 8002698:	f04f 30ff 	mov.w	r0, #4294967295
 800269c:	f7fd fe70 	bl	8000380 <HAL_NVIC_SetPriority>
 80026a0:	bd08      	pop	{r3, pc}
	...

080026a4 <HAL_TIM_Base_MspInit>:

  /* USER CODE END MspInit 1 */
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026a4:	b500      	push	{lr}
 80026a6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM1)
 80026a8:	6803      	ldr	r3, [r0, #0]
 80026aa:	4a28      	ldr	r2, [pc, #160]	; (800274c <HAL_TIM_Base_MspInit+0xa8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d008      	beq.n	80026c2 <HAL_TIM_Base_MspInit+0x1e>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80026b0:	4a27      	ldr	r2, [pc, #156]	; (8002750 <HAL_TIM_Base_MspInit+0xac>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d01e      	beq.n	80026f4 <HAL_TIM_Base_MspInit+0x50>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM8)
 80026b6:	4a27      	ldr	r2, [pc, #156]	; (8002754 <HAL_TIM_Base_MspInit+0xb0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d02e      	beq.n	800271a <HAL_TIM_Base_MspInit+0x76>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80026bc:	b009      	add	sp, #36	; 0x24
 80026be:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026c2:	4b25      	ldr	r3, [pc, #148]	; (8002758 <HAL_TIM_Base_MspInit+0xb4>)
 80026c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	645a      	str	r2, [r3, #68]	; 0x44
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026d6:	2380      	movs	r3, #128	; 0x80
 80026d8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026da:	2302      	movs	r3, #2
 80026dc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e2:	2303      	movs	r3, #3
 80026e4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026e6:	2301      	movs	r3, #1
 80026e8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026ea:	a903      	add	r1, sp, #12
 80026ec:	481b      	ldr	r0, [pc, #108]	; (800275c <HAL_TIM_Base_MspInit+0xb8>)
 80026ee:	f7fd feaf 	bl	8000450 <HAL_GPIO_Init>
 80026f2:	e7e3      	b.n	80026bc <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026f4:	4b18      	ldr	r3, [pc, #96]	; (8002758 <HAL_TIM_Base_MspInit+0xb4>)
 80026f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026f8:	f042 0202 	orr.w	r2, r2, #2
 80026fc:	641a      	str	r2, [r3, #64]	; 0x40
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	9301      	str	r3, [sp, #4]
 8002706:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002708:	2200      	movs	r2, #0
 800270a:	4611      	mov	r1, r2
 800270c:	201d      	movs	r0, #29
 800270e:	f7fd fe37 	bl	8000380 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002712:	201d      	movs	r0, #29
 8002714:	f7fd fe64 	bl	80003e0 <HAL_NVIC_EnableIRQ>
 8002718:	e7d0      	b.n	80026bc <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800271a:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <HAL_TIM_Base_MspInit+0xb4>)
 800271c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800271e:	f042 0202 	orr.w	r2, r2, #2
 8002722:	645a      	str	r2, [r3, #68]	; 0x44
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	9302      	str	r3, [sp, #8]
 800272c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800272e:	2301      	movs	r3, #1
 8002730:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002732:	2302      	movs	r3, #2
 8002734:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800273c:	2303      	movs	r3, #3
 800273e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002740:	a903      	add	r1, sp, #12
 8002742:	4807      	ldr	r0, [pc, #28]	; (8002760 <HAL_TIM_Base_MspInit+0xbc>)
 8002744:	f7fd fe84 	bl	8000450 <HAL_GPIO_Init>
}
 8002748:	e7b8      	b.n	80026bc <HAL_TIM_Base_MspInit+0x18>
 800274a:	bf00      	nop
 800274c:	40010000 	.word	0x40010000
 8002750:	40000400 	.word	0x40000400
 8002754:	40010400 	.word	0x40010400
 8002758:	40023800 	.word	0x40023800
 800275c:	40021000 	.word	0x40021000
 8002760:	40020000 	.word	0x40020000

08002764 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART3)
 8002764:	6802      	ldr	r2, [r0, #0]
 8002766:	4b11      	ldr	r3, [pc, #68]	; (80027ac <HAL_UART_MspInit+0x48>)
 8002768:	429a      	cmp	r2, r3
 800276a:	d000      	beq.n	800276e <HAL_UART_MspInit+0xa>
 800276c:	4770      	bx	lr
{
 800276e:	b500      	push	{lr}
 8002770:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002772:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8002776:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002778:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800277c:	641a      	str	r2, [r3, #64]	; 0x40
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	9b00      	ldr	r3, [sp, #0]
  
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002788:	f44f 7340 	mov.w	r3, #768	; 0x300
 800278c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278e:	2302      	movs	r3, #2
 8002790:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002792:	2301      	movs	r3, #1
 8002794:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002796:	2303      	movs	r3, #3
 8002798:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800279a:	2307      	movs	r3, #7
 800279c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800279e:	a901      	add	r1, sp, #4
 80027a0:	4803      	ldr	r0, [pc, #12]	; (80027b0 <HAL_UART_MspInit+0x4c>)
 80027a2:	f7fd fe55 	bl	8000450 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027a6:	b007      	add	sp, #28
 80027a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80027ac:	40004800 	.word	0x40004800
 80027b0:	40020c00 	.word	0x40020c00

080027b4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80027b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027b6:	f7fd fdb5 	bl	8000324 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80027ba:	f7fd fe44 	bl	8000446 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
   //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
     watch1 = TIM1->CNT ; // Copying current Timer Value on a System tick
 80027be:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <SysTick_Handler+0x1c>)
 80027c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027c2:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <SysTick_Handler+0x20>)
 80027c4:	601a      	str	r2, [r3, #0]
     watch2 = TIM8->CNT ; // Copying current Timer Value on a System tick
 80027c6:	4a04      	ldr	r2, [pc, #16]	; (80027d8 <SysTick_Handler+0x24>)
 80027c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027ca:	605a      	str	r2, [r3, #4]
 80027cc:	bd08      	pop	{r3, pc}
 80027ce:	bf00      	nop
 80027d0:	40010000 	.word	0x40010000
 80027d4:	200000bc 	.word	0x200000bc
 80027d8:	40010400 	.word	0x40010400

080027dc <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 80027dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027de:	4808      	ldr	r0, [pc, #32]	; (8002800 <TIM3_IRQHandler+0x24>)
 80027e0:	f7fe ff05 	bl	80015ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  // 1 Second Ticker for UART Output
  SecCount++ ;
 80027e4:	4b07      	ldr	r3, [pc, #28]	; (8002804 <TIM3_IRQHandler+0x28>)
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	3201      	adds	r2, #1
 80027ea:	609a      	str	r2, [r3, #8]
  GlobalCount1 = watch1 ;
 80027ec:	6819      	ldr	r1, [r3, #0]
 80027ee:	4a06      	ldr	r2, [pc, #24]	; (8002808 <TIM3_IRQHandler+0x2c>)
 80027f0:	6011      	str	r1, [r2, #0]
  GlobalCount2 = watch2 ;
 80027f2:	6859      	ldr	r1, [r3, #4]
 80027f4:	4a05      	ldr	r2, [pc, #20]	; (800280c <TIM3_IRQHandler+0x30>)
 80027f6:	6011      	str	r1, [r2, #0]
  msFlag = 1 ;
 80027f8:	2201      	movs	r2, #1
 80027fa:	60da      	str	r2, [r3, #12]
 80027fc:	bd08      	pop	{r3, pc}
 80027fe:	bf00      	nop
 8002800:	20000194 	.word	0x20000194
 8002804:	200000bc 	.word	0x200000bc
 8002808:	200000dc 	.word	0x200000dc
 800280c:	20000224 	.word	0x20000224

08002810 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002810:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002812:	4a0f      	ldr	r2, [pc, #60]	; (8002850 <SystemInit+0x40>)
 8002814:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800281c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <SystemInit+0x44>)
 8002822:	6819      	ldr	r1, [r3, #0]
 8002824:	f041 0101 	orr.w	r1, r1, #1
 8002828:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800282a:	2000      	movs	r0, #0
 800282c:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800282e:	681c      	ldr	r4, [r3, #0]
 8002830:	4909      	ldr	r1, [pc, #36]	; (8002858 <SystemInit+0x48>)
 8002832:	4021      	ands	r1, r4
 8002834:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002836:	4909      	ldr	r1, [pc, #36]	; (800285c <SystemInit+0x4c>)
 8002838:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800283a:	6819      	ldr	r1, [r3, #0]
 800283c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002840:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002842:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002844:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002848:	6093      	str	r3, [r2, #8]
#endif
}
 800284a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000ed00 	.word	0xe000ed00
 8002854:	40023800 	.word	0x40023800
 8002858:	fef6ffff 	.word	0xfef6ffff
 800285c:	24003010 	.word	0x24003010

08002860 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002898 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002864:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002866:	e003      	b.n	8002870 <LoopCopyDataInit>

08002868 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002868:	4b0c      	ldr	r3, [pc, #48]	; (800289c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800286a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800286c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800286e:	3104      	adds	r1, #4

08002870 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002870:	480b      	ldr	r0, [pc, #44]	; (80028a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002872:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002874:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002876:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002878:	d3f6      	bcc.n	8002868 <CopyDataInit>
  ldr  r2, =_sbss
 800287a:	4a0b      	ldr	r2, [pc, #44]	; (80028a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800287c:	e002      	b.n	8002884 <LoopFillZerobss>

0800287e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800287e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002880:	f842 3b04 	str.w	r3, [r2], #4

08002884 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002884:	4b09      	ldr	r3, [pc, #36]	; (80028ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002886:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002888:	d3f9      	bcc.n	800287e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800288a:	f7ff ffc1 	bl	8002810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800288e:	f000 f811 	bl	80028b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002892:	f7ff fe27 	bl	80024e4 <main>
  bx  lr    
 8002896:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002898:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800289c:	080031d4 	.word	0x080031d4
  ldr  r0, =_sdata
 80028a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80028a4:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 80028a8:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 80028ac:	20000238 	.word	0x20000238

080028b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028b0:	e7fe      	b.n	80028b0 <ADC_IRQHandler>
	...

080028b4 <__libc_init_array>:
 80028b4:	b570      	push	{r4, r5, r6, lr}
 80028b6:	4e0d      	ldr	r6, [pc, #52]	; (80028ec <__libc_init_array+0x38>)
 80028b8:	4c0d      	ldr	r4, [pc, #52]	; (80028f0 <__libc_init_array+0x3c>)
 80028ba:	1ba4      	subs	r4, r4, r6
 80028bc:	10a4      	asrs	r4, r4, #2
 80028be:	2500      	movs	r5, #0
 80028c0:	42a5      	cmp	r5, r4
 80028c2:	d109      	bne.n	80028d8 <__libc_init_array+0x24>
 80028c4:	4e0b      	ldr	r6, [pc, #44]	; (80028f4 <__libc_init_array+0x40>)
 80028c6:	4c0c      	ldr	r4, [pc, #48]	; (80028f8 <__libc_init_array+0x44>)
 80028c8:	f000 fc44 	bl	8003154 <_init>
 80028cc:	1ba4      	subs	r4, r4, r6
 80028ce:	10a4      	asrs	r4, r4, #2
 80028d0:	2500      	movs	r5, #0
 80028d2:	42a5      	cmp	r5, r4
 80028d4:	d105      	bne.n	80028e2 <__libc_init_array+0x2e>
 80028d6:	bd70      	pop	{r4, r5, r6, pc}
 80028d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028dc:	4798      	blx	r3
 80028de:	3501      	adds	r5, #1
 80028e0:	e7ee      	b.n	80028c0 <__libc_init_array+0xc>
 80028e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028e6:	4798      	blx	r3
 80028e8:	3501      	adds	r5, #1
 80028ea:	e7f2      	b.n	80028d2 <__libc_init_array+0x1e>
 80028ec:	080031cc 	.word	0x080031cc
 80028f0:	080031cc 	.word	0x080031cc
 80028f4:	080031cc 	.word	0x080031cc
 80028f8:	080031d0 	.word	0x080031d0

080028fc <siprintf>:
 80028fc:	b40e      	push	{r1, r2, r3}
 80028fe:	b500      	push	{lr}
 8002900:	b09c      	sub	sp, #112	; 0x70
 8002902:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002906:	ab1d      	add	r3, sp, #116	; 0x74
 8002908:	f8ad 1014 	strh.w	r1, [sp, #20]
 800290c:	9002      	str	r0, [sp, #8]
 800290e:	9006      	str	r0, [sp, #24]
 8002910:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002914:	480a      	ldr	r0, [pc, #40]	; (8002940 <siprintf+0x44>)
 8002916:	9104      	str	r1, [sp, #16]
 8002918:	9107      	str	r1, [sp, #28]
 800291a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800291e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002922:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002926:	6800      	ldr	r0, [r0, #0]
 8002928:	9301      	str	r3, [sp, #4]
 800292a:	a902      	add	r1, sp, #8
 800292c:	f000 f866 	bl	80029fc <_svfiprintf_r>
 8002930:	9b02      	ldr	r3, [sp, #8]
 8002932:	2200      	movs	r2, #0
 8002934:	701a      	strb	r2, [r3, #0]
 8002936:	b01c      	add	sp, #112	; 0x70
 8002938:	f85d eb04 	ldr.w	lr, [sp], #4
 800293c:	b003      	add	sp, #12
 800293e:	4770      	bx	lr
 8002940:	20000024 	.word	0x20000024

08002944 <__ssputs_r>:
 8002944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002948:	688e      	ldr	r6, [r1, #8]
 800294a:	429e      	cmp	r6, r3
 800294c:	4682      	mov	sl, r0
 800294e:	460c      	mov	r4, r1
 8002950:	4691      	mov	r9, r2
 8002952:	4698      	mov	r8, r3
 8002954:	d835      	bhi.n	80029c2 <__ssputs_r+0x7e>
 8002956:	898a      	ldrh	r2, [r1, #12]
 8002958:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800295c:	d031      	beq.n	80029c2 <__ssputs_r+0x7e>
 800295e:	6825      	ldr	r5, [r4, #0]
 8002960:	6909      	ldr	r1, [r1, #16]
 8002962:	1a6f      	subs	r7, r5, r1
 8002964:	6965      	ldr	r5, [r4, #20]
 8002966:	2302      	movs	r3, #2
 8002968:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800296c:	fb95 f5f3 	sdiv	r5, r5, r3
 8002970:	f108 0301 	add.w	r3, r8, #1
 8002974:	443b      	add	r3, r7
 8002976:	429d      	cmp	r5, r3
 8002978:	bf38      	it	cc
 800297a:	461d      	movcc	r5, r3
 800297c:	0553      	lsls	r3, r2, #21
 800297e:	d531      	bpl.n	80029e4 <__ssputs_r+0xa0>
 8002980:	4629      	mov	r1, r5
 8002982:	f000 fb39 	bl	8002ff8 <_malloc_r>
 8002986:	4606      	mov	r6, r0
 8002988:	b950      	cbnz	r0, 80029a0 <__ssputs_r+0x5c>
 800298a:	230c      	movs	r3, #12
 800298c:	f8ca 3000 	str.w	r3, [sl]
 8002990:	89a3      	ldrh	r3, [r4, #12]
 8002992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002996:	81a3      	strh	r3, [r4, #12]
 8002998:	f04f 30ff 	mov.w	r0, #4294967295
 800299c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029a0:	463a      	mov	r2, r7
 80029a2:	6921      	ldr	r1, [r4, #16]
 80029a4:	f000 fab4 	bl	8002f10 <memcpy>
 80029a8:	89a3      	ldrh	r3, [r4, #12]
 80029aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80029ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b2:	81a3      	strh	r3, [r4, #12]
 80029b4:	6126      	str	r6, [r4, #16]
 80029b6:	6165      	str	r5, [r4, #20]
 80029b8:	443e      	add	r6, r7
 80029ba:	1bed      	subs	r5, r5, r7
 80029bc:	6026      	str	r6, [r4, #0]
 80029be:	60a5      	str	r5, [r4, #8]
 80029c0:	4646      	mov	r6, r8
 80029c2:	4546      	cmp	r6, r8
 80029c4:	bf28      	it	cs
 80029c6:	4646      	movcs	r6, r8
 80029c8:	4632      	mov	r2, r6
 80029ca:	4649      	mov	r1, r9
 80029cc:	6820      	ldr	r0, [r4, #0]
 80029ce:	f000 faaa 	bl	8002f26 <memmove>
 80029d2:	68a3      	ldr	r3, [r4, #8]
 80029d4:	1b9b      	subs	r3, r3, r6
 80029d6:	60a3      	str	r3, [r4, #8]
 80029d8:	6823      	ldr	r3, [r4, #0]
 80029da:	441e      	add	r6, r3
 80029dc:	6026      	str	r6, [r4, #0]
 80029de:	2000      	movs	r0, #0
 80029e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029e4:	462a      	mov	r2, r5
 80029e6:	f000 fb65 	bl	80030b4 <_realloc_r>
 80029ea:	4606      	mov	r6, r0
 80029ec:	2800      	cmp	r0, #0
 80029ee:	d1e1      	bne.n	80029b4 <__ssputs_r+0x70>
 80029f0:	6921      	ldr	r1, [r4, #16]
 80029f2:	4650      	mov	r0, sl
 80029f4:	f000 fab2 	bl	8002f5c <_free_r>
 80029f8:	e7c7      	b.n	800298a <__ssputs_r+0x46>
	...

080029fc <_svfiprintf_r>:
 80029fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a00:	b09d      	sub	sp, #116	; 0x74
 8002a02:	4680      	mov	r8, r0
 8002a04:	9303      	str	r3, [sp, #12]
 8002a06:	898b      	ldrh	r3, [r1, #12]
 8002a08:	061c      	lsls	r4, r3, #24
 8002a0a:	460d      	mov	r5, r1
 8002a0c:	4616      	mov	r6, r2
 8002a0e:	d50f      	bpl.n	8002a30 <_svfiprintf_r+0x34>
 8002a10:	690b      	ldr	r3, [r1, #16]
 8002a12:	b96b      	cbnz	r3, 8002a30 <_svfiprintf_r+0x34>
 8002a14:	2140      	movs	r1, #64	; 0x40
 8002a16:	f000 faef 	bl	8002ff8 <_malloc_r>
 8002a1a:	6028      	str	r0, [r5, #0]
 8002a1c:	6128      	str	r0, [r5, #16]
 8002a1e:	b928      	cbnz	r0, 8002a2c <_svfiprintf_r+0x30>
 8002a20:	230c      	movs	r3, #12
 8002a22:	f8c8 3000 	str.w	r3, [r8]
 8002a26:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2a:	e0c5      	b.n	8002bb8 <_svfiprintf_r+0x1bc>
 8002a2c:	2340      	movs	r3, #64	; 0x40
 8002a2e:	616b      	str	r3, [r5, #20]
 8002a30:	2300      	movs	r3, #0
 8002a32:	9309      	str	r3, [sp, #36]	; 0x24
 8002a34:	2320      	movs	r3, #32
 8002a36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a3a:	2330      	movs	r3, #48	; 0x30
 8002a3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a40:	f04f 0b01 	mov.w	fp, #1
 8002a44:	4637      	mov	r7, r6
 8002a46:	463c      	mov	r4, r7
 8002a48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d13c      	bne.n	8002aca <_svfiprintf_r+0xce>
 8002a50:	ebb7 0a06 	subs.w	sl, r7, r6
 8002a54:	d00b      	beq.n	8002a6e <_svfiprintf_r+0x72>
 8002a56:	4653      	mov	r3, sl
 8002a58:	4632      	mov	r2, r6
 8002a5a:	4629      	mov	r1, r5
 8002a5c:	4640      	mov	r0, r8
 8002a5e:	f7ff ff71 	bl	8002944 <__ssputs_r>
 8002a62:	3001      	adds	r0, #1
 8002a64:	f000 80a3 	beq.w	8002bae <_svfiprintf_r+0x1b2>
 8002a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a6a:	4453      	add	r3, sl
 8002a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8002a6e:	783b      	ldrb	r3, [r7, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 809c 	beq.w	8002bae <_svfiprintf_r+0x1b2>
 8002a76:	2300      	movs	r3, #0
 8002a78:	f04f 32ff 	mov.w	r2, #4294967295
 8002a7c:	9304      	str	r3, [sp, #16]
 8002a7e:	9307      	str	r3, [sp, #28]
 8002a80:	9205      	str	r2, [sp, #20]
 8002a82:	9306      	str	r3, [sp, #24]
 8002a84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a88:	931a      	str	r3, [sp, #104]	; 0x68
 8002a8a:	2205      	movs	r2, #5
 8002a8c:	7821      	ldrb	r1, [r4, #0]
 8002a8e:	4850      	ldr	r0, [pc, #320]	; (8002bd0 <_svfiprintf_r+0x1d4>)
 8002a90:	f7fd fbd6 	bl	8000240 <memchr>
 8002a94:	1c67      	adds	r7, r4, #1
 8002a96:	9b04      	ldr	r3, [sp, #16]
 8002a98:	b9d8      	cbnz	r0, 8002ad2 <_svfiprintf_r+0xd6>
 8002a9a:	06d9      	lsls	r1, r3, #27
 8002a9c:	bf44      	itt	mi
 8002a9e:	2220      	movmi	r2, #32
 8002aa0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002aa4:	071a      	lsls	r2, r3, #28
 8002aa6:	bf44      	itt	mi
 8002aa8:	222b      	movmi	r2, #43	; 0x2b
 8002aaa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002aae:	7822      	ldrb	r2, [r4, #0]
 8002ab0:	2a2a      	cmp	r2, #42	; 0x2a
 8002ab2:	d016      	beq.n	8002ae2 <_svfiprintf_r+0xe6>
 8002ab4:	9a07      	ldr	r2, [sp, #28]
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	200a      	movs	r0, #10
 8002aba:	4627      	mov	r7, r4
 8002abc:	3401      	adds	r4, #1
 8002abe:	783b      	ldrb	r3, [r7, #0]
 8002ac0:	3b30      	subs	r3, #48	; 0x30
 8002ac2:	2b09      	cmp	r3, #9
 8002ac4:	d951      	bls.n	8002b6a <_svfiprintf_r+0x16e>
 8002ac6:	b1c9      	cbz	r1, 8002afc <_svfiprintf_r+0x100>
 8002ac8:	e011      	b.n	8002aee <_svfiprintf_r+0xf2>
 8002aca:	2b25      	cmp	r3, #37	; 0x25
 8002acc:	d0c0      	beq.n	8002a50 <_svfiprintf_r+0x54>
 8002ace:	4627      	mov	r7, r4
 8002ad0:	e7b9      	b.n	8002a46 <_svfiprintf_r+0x4a>
 8002ad2:	4a3f      	ldr	r2, [pc, #252]	; (8002bd0 <_svfiprintf_r+0x1d4>)
 8002ad4:	1a80      	subs	r0, r0, r2
 8002ad6:	fa0b f000 	lsl.w	r0, fp, r0
 8002ada:	4318      	orrs	r0, r3
 8002adc:	9004      	str	r0, [sp, #16]
 8002ade:	463c      	mov	r4, r7
 8002ae0:	e7d3      	b.n	8002a8a <_svfiprintf_r+0x8e>
 8002ae2:	9a03      	ldr	r2, [sp, #12]
 8002ae4:	1d11      	adds	r1, r2, #4
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	9103      	str	r1, [sp, #12]
 8002aea:	2a00      	cmp	r2, #0
 8002aec:	db01      	blt.n	8002af2 <_svfiprintf_r+0xf6>
 8002aee:	9207      	str	r2, [sp, #28]
 8002af0:	e004      	b.n	8002afc <_svfiprintf_r+0x100>
 8002af2:	4252      	negs	r2, r2
 8002af4:	f043 0302 	orr.w	r3, r3, #2
 8002af8:	9207      	str	r2, [sp, #28]
 8002afa:	9304      	str	r3, [sp, #16]
 8002afc:	783b      	ldrb	r3, [r7, #0]
 8002afe:	2b2e      	cmp	r3, #46	; 0x2e
 8002b00:	d10e      	bne.n	8002b20 <_svfiprintf_r+0x124>
 8002b02:	787b      	ldrb	r3, [r7, #1]
 8002b04:	2b2a      	cmp	r3, #42	; 0x2a
 8002b06:	f107 0101 	add.w	r1, r7, #1
 8002b0a:	d132      	bne.n	8002b72 <_svfiprintf_r+0x176>
 8002b0c:	9b03      	ldr	r3, [sp, #12]
 8002b0e:	1d1a      	adds	r2, r3, #4
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	9203      	str	r2, [sp, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	bfb8      	it	lt
 8002b18:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b1c:	3702      	adds	r7, #2
 8002b1e:	9305      	str	r3, [sp, #20]
 8002b20:	4c2c      	ldr	r4, [pc, #176]	; (8002bd4 <_svfiprintf_r+0x1d8>)
 8002b22:	7839      	ldrb	r1, [r7, #0]
 8002b24:	2203      	movs	r2, #3
 8002b26:	4620      	mov	r0, r4
 8002b28:	f7fd fb8a 	bl	8000240 <memchr>
 8002b2c:	b138      	cbz	r0, 8002b3e <_svfiprintf_r+0x142>
 8002b2e:	2340      	movs	r3, #64	; 0x40
 8002b30:	1b00      	subs	r0, r0, r4
 8002b32:	fa03 f000 	lsl.w	r0, r3, r0
 8002b36:	9b04      	ldr	r3, [sp, #16]
 8002b38:	4303      	orrs	r3, r0
 8002b3a:	9304      	str	r3, [sp, #16]
 8002b3c:	3701      	adds	r7, #1
 8002b3e:	7839      	ldrb	r1, [r7, #0]
 8002b40:	4825      	ldr	r0, [pc, #148]	; (8002bd8 <_svfiprintf_r+0x1dc>)
 8002b42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b46:	2206      	movs	r2, #6
 8002b48:	1c7e      	adds	r6, r7, #1
 8002b4a:	f7fd fb79 	bl	8000240 <memchr>
 8002b4e:	2800      	cmp	r0, #0
 8002b50:	d035      	beq.n	8002bbe <_svfiprintf_r+0x1c2>
 8002b52:	4b22      	ldr	r3, [pc, #136]	; (8002bdc <_svfiprintf_r+0x1e0>)
 8002b54:	b9fb      	cbnz	r3, 8002b96 <_svfiprintf_r+0x19a>
 8002b56:	9b03      	ldr	r3, [sp, #12]
 8002b58:	3307      	adds	r3, #7
 8002b5a:	f023 0307 	bic.w	r3, r3, #7
 8002b5e:	3308      	adds	r3, #8
 8002b60:	9303      	str	r3, [sp, #12]
 8002b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b64:	444b      	add	r3, r9
 8002b66:	9309      	str	r3, [sp, #36]	; 0x24
 8002b68:	e76c      	b.n	8002a44 <_svfiprintf_r+0x48>
 8002b6a:	fb00 3202 	mla	r2, r0, r2, r3
 8002b6e:	2101      	movs	r1, #1
 8002b70:	e7a3      	b.n	8002aba <_svfiprintf_r+0xbe>
 8002b72:	2300      	movs	r3, #0
 8002b74:	9305      	str	r3, [sp, #20]
 8002b76:	4618      	mov	r0, r3
 8002b78:	240a      	movs	r4, #10
 8002b7a:	460f      	mov	r7, r1
 8002b7c:	3101      	adds	r1, #1
 8002b7e:	783a      	ldrb	r2, [r7, #0]
 8002b80:	3a30      	subs	r2, #48	; 0x30
 8002b82:	2a09      	cmp	r2, #9
 8002b84:	d903      	bls.n	8002b8e <_svfiprintf_r+0x192>
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0ca      	beq.n	8002b20 <_svfiprintf_r+0x124>
 8002b8a:	9005      	str	r0, [sp, #20]
 8002b8c:	e7c8      	b.n	8002b20 <_svfiprintf_r+0x124>
 8002b8e:	fb04 2000 	mla	r0, r4, r0, r2
 8002b92:	2301      	movs	r3, #1
 8002b94:	e7f1      	b.n	8002b7a <_svfiprintf_r+0x17e>
 8002b96:	ab03      	add	r3, sp, #12
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	462a      	mov	r2, r5
 8002b9c:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <_svfiprintf_r+0x1e4>)
 8002b9e:	a904      	add	r1, sp, #16
 8002ba0:	4640      	mov	r0, r8
 8002ba2:	f3af 8000 	nop.w
 8002ba6:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002baa:	4681      	mov	r9, r0
 8002bac:	d1d9      	bne.n	8002b62 <_svfiprintf_r+0x166>
 8002bae:	89ab      	ldrh	r3, [r5, #12]
 8002bb0:	065b      	lsls	r3, r3, #25
 8002bb2:	f53f af38 	bmi.w	8002a26 <_svfiprintf_r+0x2a>
 8002bb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002bb8:	b01d      	add	sp, #116	; 0x74
 8002bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bbe:	ab03      	add	r3, sp, #12
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	462a      	mov	r2, r5
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <_svfiprintf_r+0x1e4>)
 8002bc6:	a904      	add	r1, sp, #16
 8002bc8:	4640      	mov	r0, r8
 8002bca:	f000 f881 	bl	8002cd0 <_printf_i>
 8002bce:	e7ea      	b.n	8002ba6 <_svfiprintf_r+0x1aa>
 8002bd0:	08003198 	.word	0x08003198
 8002bd4:	0800319e 	.word	0x0800319e
 8002bd8:	080031a2 	.word	0x080031a2
 8002bdc:	00000000 	.word	0x00000000
 8002be0:	08002945 	.word	0x08002945

08002be4 <_printf_common>:
 8002be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002be8:	4691      	mov	r9, r2
 8002bea:	461f      	mov	r7, r3
 8002bec:	688a      	ldr	r2, [r1, #8]
 8002bee:	690b      	ldr	r3, [r1, #16]
 8002bf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	bfb8      	it	lt
 8002bf8:	4613      	movlt	r3, r2
 8002bfa:	f8c9 3000 	str.w	r3, [r9]
 8002bfe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c02:	4606      	mov	r6, r0
 8002c04:	460c      	mov	r4, r1
 8002c06:	b112      	cbz	r2, 8002c0e <_printf_common+0x2a>
 8002c08:	3301      	adds	r3, #1
 8002c0a:	f8c9 3000 	str.w	r3, [r9]
 8002c0e:	6823      	ldr	r3, [r4, #0]
 8002c10:	0699      	lsls	r1, r3, #26
 8002c12:	bf42      	ittt	mi
 8002c14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002c18:	3302      	addmi	r3, #2
 8002c1a:	f8c9 3000 	strmi.w	r3, [r9]
 8002c1e:	6825      	ldr	r5, [r4, #0]
 8002c20:	f015 0506 	ands.w	r5, r5, #6
 8002c24:	d107      	bne.n	8002c36 <_printf_common+0x52>
 8002c26:	f104 0a19 	add.w	sl, r4, #25
 8002c2a:	68e3      	ldr	r3, [r4, #12]
 8002c2c:	f8d9 2000 	ldr.w	r2, [r9]
 8002c30:	1a9b      	subs	r3, r3, r2
 8002c32:	429d      	cmp	r5, r3
 8002c34:	db29      	blt.n	8002c8a <_printf_common+0xa6>
 8002c36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002c3a:	6822      	ldr	r2, [r4, #0]
 8002c3c:	3300      	adds	r3, #0
 8002c3e:	bf18      	it	ne
 8002c40:	2301      	movne	r3, #1
 8002c42:	0692      	lsls	r2, r2, #26
 8002c44:	d42e      	bmi.n	8002ca4 <_printf_common+0xc0>
 8002c46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c4a:	4639      	mov	r1, r7
 8002c4c:	4630      	mov	r0, r6
 8002c4e:	47c0      	blx	r8
 8002c50:	3001      	adds	r0, #1
 8002c52:	d021      	beq.n	8002c98 <_printf_common+0xb4>
 8002c54:	6823      	ldr	r3, [r4, #0]
 8002c56:	68e5      	ldr	r5, [r4, #12]
 8002c58:	f8d9 2000 	ldr.w	r2, [r9]
 8002c5c:	f003 0306 	and.w	r3, r3, #6
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	bf08      	it	eq
 8002c64:	1aad      	subeq	r5, r5, r2
 8002c66:	68a3      	ldr	r3, [r4, #8]
 8002c68:	6922      	ldr	r2, [r4, #16]
 8002c6a:	bf0c      	ite	eq
 8002c6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c70:	2500      	movne	r5, #0
 8002c72:	4293      	cmp	r3, r2
 8002c74:	bfc4      	itt	gt
 8002c76:	1a9b      	subgt	r3, r3, r2
 8002c78:	18ed      	addgt	r5, r5, r3
 8002c7a:	f04f 0900 	mov.w	r9, #0
 8002c7e:	341a      	adds	r4, #26
 8002c80:	454d      	cmp	r5, r9
 8002c82:	d11b      	bne.n	8002cbc <_printf_common+0xd8>
 8002c84:	2000      	movs	r0, #0
 8002c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	4652      	mov	r2, sl
 8002c8e:	4639      	mov	r1, r7
 8002c90:	4630      	mov	r0, r6
 8002c92:	47c0      	blx	r8
 8002c94:	3001      	adds	r0, #1
 8002c96:	d103      	bne.n	8002ca0 <_printf_common+0xbc>
 8002c98:	f04f 30ff 	mov.w	r0, #4294967295
 8002c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ca0:	3501      	adds	r5, #1
 8002ca2:	e7c2      	b.n	8002c2a <_printf_common+0x46>
 8002ca4:	18e1      	adds	r1, r4, r3
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	2030      	movs	r0, #48	; 0x30
 8002caa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002cae:	4422      	add	r2, r4
 8002cb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002cb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002cb8:	3302      	adds	r3, #2
 8002cba:	e7c4      	b.n	8002c46 <_printf_common+0x62>
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	4622      	mov	r2, r4
 8002cc0:	4639      	mov	r1, r7
 8002cc2:	4630      	mov	r0, r6
 8002cc4:	47c0      	blx	r8
 8002cc6:	3001      	adds	r0, #1
 8002cc8:	d0e6      	beq.n	8002c98 <_printf_common+0xb4>
 8002cca:	f109 0901 	add.w	r9, r9, #1
 8002cce:	e7d7      	b.n	8002c80 <_printf_common+0x9c>

08002cd0 <_printf_i>:
 8002cd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002cd4:	4617      	mov	r7, r2
 8002cd6:	7e0a      	ldrb	r2, [r1, #24]
 8002cd8:	b085      	sub	sp, #20
 8002cda:	2a6e      	cmp	r2, #110	; 0x6e
 8002cdc:	4698      	mov	r8, r3
 8002cde:	4606      	mov	r6, r0
 8002ce0:	460c      	mov	r4, r1
 8002ce2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ce4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002ce8:	f000 80bc 	beq.w	8002e64 <_printf_i+0x194>
 8002cec:	d81a      	bhi.n	8002d24 <_printf_i+0x54>
 8002cee:	2a63      	cmp	r2, #99	; 0x63
 8002cf0:	d02e      	beq.n	8002d50 <_printf_i+0x80>
 8002cf2:	d80a      	bhi.n	8002d0a <_printf_i+0x3a>
 8002cf4:	2a00      	cmp	r2, #0
 8002cf6:	f000 80c8 	beq.w	8002e8a <_printf_i+0x1ba>
 8002cfa:	2a58      	cmp	r2, #88	; 0x58
 8002cfc:	f000 808a 	beq.w	8002e14 <_printf_i+0x144>
 8002d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d04:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002d08:	e02a      	b.n	8002d60 <_printf_i+0x90>
 8002d0a:	2a64      	cmp	r2, #100	; 0x64
 8002d0c:	d001      	beq.n	8002d12 <_printf_i+0x42>
 8002d0e:	2a69      	cmp	r2, #105	; 0x69
 8002d10:	d1f6      	bne.n	8002d00 <_printf_i+0x30>
 8002d12:	6821      	ldr	r1, [r4, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002d1a:	d023      	beq.n	8002d64 <_printf_i+0x94>
 8002d1c:	1d11      	adds	r1, r2, #4
 8002d1e:	6019      	str	r1, [r3, #0]
 8002d20:	6813      	ldr	r3, [r2, #0]
 8002d22:	e027      	b.n	8002d74 <_printf_i+0xa4>
 8002d24:	2a73      	cmp	r2, #115	; 0x73
 8002d26:	f000 80b4 	beq.w	8002e92 <_printf_i+0x1c2>
 8002d2a:	d808      	bhi.n	8002d3e <_printf_i+0x6e>
 8002d2c:	2a6f      	cmp	r2, #111	; 0x6f
 8002d2e:	d02a      	beq.n	8002d86 <_printf_i+0xb6>
 8002d30:	2a70      	cmp	r2, #112	; 0x70
 8002d32:	d1e5      	bne.n	8002d00 <_printf_i+0x30>
 8002d34:	680a      	ldr	r2, [r1, #0]
 8002d36:	f042 0220 	orr.w	r2, r2, #32
 8002d3a:	600a      	str	r2, [r1, #0]
 8002d3c:	e003      	b.n	8002d46 <_printf_i+0x76>
 8002d3e:	2a75      	cmp	r2, #117	; 0x75
 8002d40:	d021      	beq.n	8002d86 <_printf_i+0xb6>
 8002d42:	2a78      	cmp	r2, #120	; 0x78
 8002d44:	d1dc      	bne.n	8002d00 <_printf_i+0x30>
 8002d46:	2278      	movs	r2, #120	; 0x78
 8002d48:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002d4c:	496e      	ldr	r1, [pc, #440]	; (8002f08 <_printf_i+0x238>)
 8002d4e:	e064      	b.n	8002e1a <_printf_i+0x14a>
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002d56:	1d11      	adds	r1, r2, #4
 8002d58:	6019      	str	r1, [r3, #0]
 8002d5a:	6813      	ldr	r3, [r2, #0]
 8002d5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0a3      	b.n	8002eac <_printf_i+0x1dc>
 8002d64:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002d68:	f102 0104 	add.w	r1, r2, #4
 8002d6c:	6019      	str	r1, [r3, #0]
 8002d6e:	d0d7      	beq.n	8002d20 <_printf_i+0x50>
 8002d70:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	da03      	bge.n	8002d80 <_printf_i+0xb0>
 8002d78:	222d      	movs	r2, #45	; 0x2d
 8002d7a:	425b      	negs	r3, r3
 8002d7c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002d80:	4962      	ldr	r1, [pc, #392]	; (8002f0c <_printf_i+0x23c>)
 8002d82:	220a      	movs	r2, #10
 8002d84:	e017      	b.n	8002db6 <_printf_i+0xe6>
 8002d86:	6820      	ldr	r0, [r4, #0]
 8002d88:	6819      	ldr	r1, [r3, #0]
 8002d8a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002d8e:	d003      	beq.n	8002d98 <_printf_i+0xc8>
 8002d90:	1d08      	adds	r0, r1, #4
 8002d92:	6018      	str	r0, [r3, #0]
 8002d94:	680b      	ldr	r3, [r1, #0]
 8002d96:	e006      	b.n	8002da6 <_printf_i+0xd6>
 8002d98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d9c:	f101 0004 	add.w	r0, r1, #4
 8002da0:	6018      	str	r0, [r3, #0]
 8002da2:	d0f7      	beq.n	8002d94 <_printf_i+0xc4>
 8002da4:	880b      	ldrh	r3, [r1, #0]
 8002da6:	4959      	ldr	r1, [pc, #356]	; (8002f0c <_printf_i+0x23c>)
 8002da8:	2a6f      	cmp	r2, #111	; 0x6f
 8002daa:	bf14      	ite	ne
 8002dac:	220a      	movne	r2, #10
 8002dae:	2208      	moveq	r2, #8
 8002db0:	2000      	movs	r0, #0
 8002db2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002db6:	6865      	ldr	r5, [r4, #4]
 8002db8:	60a5      	str	r5, [r4, #8]
 8002dba:	2d00      	cmp	r5, #0
 8002dbc:	f2c0 809c 	blt.w	8002ef8 <_printf_i+0x228>
 8002dc0:	6820      	ldr	r0, [r4, #0]
 8002dc2:	f020 0004 	bic.w	r0, r0, #4
 8002dc6:	6020      	str	r0, [r4, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d13f      	bne.n	8002e4c <_printf_i+0x17c>
 8002dcc:	2d00      	cmp	r5, #0
 8002dce:	f040 8095 	bne.w	8002efc <_printf_i+0x22c>
 8002dd2:	4675      	mov	r5, lr
 8002dd4:	2a08      	cmp	r2, #8
 8002dd6:	d10b      	bne.n	8002df0 <_printf_i+0x120>
 8002dd8:	6823      	ldr	r3, [r4, #0]
 8002dda:	07da      	lsls	r2, r3, #31
 8002ddc:	d508      	bpl.n	8002df0 <_printf_i+0x120>
 8002dde:	6923      	ldr	r3, [r4, #16]
 8002de0:	6862      	ldr	r2, [r4, #4]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	bfde      	ittt	le
 8002de6:	2330      	movle	r3, #48	; 0x30
 8002de8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002dec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002df0:	ebae 0305 	sub.w	r3, lr, r5
 8002df4:	6123      	str	r3, [r4, #16]
 8002df6:	f8cd 8000 	str.w	r8, [sp]
 8002dfa:	463b      	mov	r3, r7
 8002dfc:	aa03      	add	r2, sp, #12
 8002dfe:	4621      	mov	r1, r4
 8002e00:	4630      	mov	r0, r6
 8002e02:	f7ff feef 	bl	8002be4 <_printf_common>
 8002e06:	3001      	adds	r0, #1
 8002e08:	d155      	bne.n	8002eb6 <_printf_i+0x1e6>
 8002e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e0e:	b005      	add	sp, #20
 8002e10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e14:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002e18:	493c      	ldr	r1, [pc, #240]	; (8002f0c <_printf_i+0x23c>)
 8002e1a:	6822      	ldr	r2, [r4, #0]
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002e22:	f100 0504 	add.w	r5, r0, #4
 8002e26:	601d      	str	r5, [r3, #0]
 8002e28:	d001      	beq.n	8002e2e <_printf_i+0x15e>
 8002e2a:	6803      	ldr	r3, [r0, #0]
 8002e2c:	e002      	b.n	8002e34 <_printf_i+0x164>
 8002e2e:	0655      	lsls	r5, r2, #25
 8002e30:	d5fb      	bpl.n	8002e2a <_printf_i+0x15a>
 8002e32:	8803      	ldrh	r3, [r0, #0]
 8002e34:	07d0      	lsls	r0, r2, #31
 8002e36:	bf44      	itt	mi
 8002e38:	f042 0220 	orrmi.w	r2, r2, #32
 8002e3c:	6022      	strmi	r2, [r4, #0]
 8002e3e:	b91b      	cbnz	r3, 8002e48 <_printf_i+0x178>
 8002e40:	6822      	ldr	r2, [r4, #0]
 8002e42:	f022 0220 	bic.w	r2, r2, #32
 8002e46:	6022      	str	r2, [r4, #0]
 8002e48:	2210      	movs	r2, #16
 8002e4a:	e7b1      	b.n	8002db0 <_printf_i+0xe0>
 8002e4c:	4675      	mov	r5, lr
 8002e4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8002e52:	fb02 3310 	mls	r3, r2, r0, r3
 8002e56:	5ccb      	ldrb	r3, [r1, r3]
 8002e58:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2800      	cmp	r0, #0
 8002e60:	d1f5      	bne.n	8002e4e <_printf_i+0x17e>
 8002e62:	e7b7      	b.n	8002dd4 <_printf_i+0x104>
 8002e64:	6808      	ldr	r0, [r1, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	6949      	ldr	r1, [r1, #20]
 8002e6a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002e6e:	d004      	beq.n	8002e7a <_printf_i+0x1aa>
 8002e70:	1d10      	adds	r0, r2, #4
 8002e72:	6018      	str	r0, [r3, #0]
 8002e74:	6813      	ldr	r3, [r2, #0]
 8002e76:	6019      	str	r1, [r3, #0]
 8002e78:	e007      	b.n	8002e8a <_printf_i+0x1ba>
 8002e7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e7e:	f102 0004 	add.w	r0, r2, #4
 8002e82:	6018      	str	r0, [r3, #0]
 8002e84:	6813      	ldr	r3, [r2, #0]
 8002e86:	d0f6      	beq.n	8002e76 <_printf_i+0x1a6>
 8002e88:	8019      	strh	r1, [r3, #0]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	6123      	str	r3, [r4, #16]
 8002e8e:	4675      	mov	r5, lr
 8002e90:	e7b1      	b.n	8002df6 <_printf_i+0x126>
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	1d11      	adds	r1, r2, #4
 8002e96:	6019      	str	r1, [r3, #0]
 8002e98:	6815      	ldr	r5, [r2, #0]
 8002e9a:	6862      	ldr	r2, [r4, #4]
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	4628      	mov	r0, r5
 8002ea0:	f7fd f9ce 	bl	8000240 <memchr>
 8002ea4:	b108      	cbz	r0, 8002eaa <_printf_i+0x1da>
 8002ea6:	1b40      	subs	r0, r0, r5
 8002ea8:	6060      	str	r0, [r4, #4]
 8002eaa:	6863      	ldr	r3, [r4, #4]
 8002eac:	6123      	str	r3, [r4, #16]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002eb4:	e79f      	b.n	8002df6 <_printf_i+0x126>
 8002eb6:	6923      	ldr	r3, [r4, #16]
 8002eb8:	462a      	mov	r2, r5
 8002eba:	4639      	mov	r1, r7
 8002ebc:	4630      	mov	r0, r6
 8002ebe:	47c0      	blx	r8
 8002ec0:	3001      	adds	r0, #1
 8002ec2:	d0a2      	beq.n	8002e0a <_printf_i+0x13a>
 8002ec4:	6823      	ldr	r3, [r4, #0]
 8002ec6:	079b      	lsls	r3, r3, #30
 8002ec8:	d507      	bpl.n	8002eda <_printf_i+0x20a>
 8002eca:	2500      	movs	r5, #0
 8002ecc:	f104 0919 	add.w	r9, r4, #25
 8002ed0:	68e3      	ldr	r3, [r4, #12]
 8002ed2:	9a03      	ldr	r2, [sp, #12]
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	429d      	cmp	r5, r3
 8002ed8:	db05      	blt.n	8002ee6 <_printf_i+0x216>
 8002eda:	68e0      	ldr	r0, [r4, #12]
 8002edc:	9b03      	ldr	r3, [sp, #12]
 8002ede:	4298      	cmp	r0, r3
 8002ee0:	bfb8      	it	lt
 8002ee2:	4618      	movlt	r0, r3
 8002ee4:	e793      	b.n	8002e0e <_printf_i+0x13e>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	464a      	mov	r2, r9
 8002eea:	4639      	mov	r1, r7
 8002eec:	4630      	mov	r0, r6
 8002eee:	47c0      	blx	r8
 8002ef0:	3001      	adds	r0, #1
 8002ef2:	d08a      	beq.n	8002e0a <_printf_i+0x13a>
 8002ef4:	3501      	adds	r5, #1
 8002ef6:	e7eb      	b.n	8002ed0 <_printf_i+0x200>
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1a7      	bne.n	8002e4c <_printf_i+0x17c>
 8002efc:	780b      	ldrb	r3, [r1, #0]
 8002efe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f06:	e765      	b.n	8002dd4 <_printf_i+0x104>
 8002f08:	080031ba 	.word	0x080031ba
 8002f0c:	080031a9 	.word	0x080031a9

08002f10 <memcpy>:
 8002f10:	b510      	push	{r4, lr}
 8002f12:	1e43      	subs	r3, r0, #1
 8002f14:	440a      	add	r2, r1
 8002f16:	4291      	cmp	r1, r2
 8002f18:	d100      	bne.n	8002f1c <memcpy+0xc>
 8002f1a:	bd10      	pop	{r4, pc}
 8002f1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f24:	e7f7      	b.n	8002f16 <memcpy+0x6>

08002f26 <memmove>:
 8002f26:	4288      	cmp	r0, r1
 8002f28:	b510      	push	{r4, lr}
 8002f2a:	eb01 0302 	add.w	r3, r1, r2
 8002f2e:	d803      	bhi.n	8002f38 <memmove+0x12>
 8002f30:	1e42      	subs	r2, r0, #1
 8002f32:	4299      	cmp	r1, r3
 8002f34:	d10c      	bne.n	8002f50 <memmove+0x2a>
 8002f36:	bd10      	pop	{r4, pc}
 8002f38:	4298      	cmp	r0, r3
 8002f3a:	d2f9      	bcs.n	8002f30 <memmove+0xa>
 8002f3c:	1881      	adds	r1, r0, r2
 8002f3e:	1ad2      	subs	r2, r2, r3
 8002f40:	42d3      	cmn	r3, r2
 8002f42:	d100      	bne.n	8002f46 <memmove+0x20>
 8002f44:	bd10      	pop	{r4, pc}
 8002f46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f4a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002f4e:	e7f7      	b.n	8002f40 <memmove+0x1a>
 8002f50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f54:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002f58:	e7eb      	b.n	8002f32 <memmove+0xc>
	...

08002f5c <_free_r>:
 8002f5c:	b538      	push	{r3, r4, r5, lr}
 8002f5e:	4605      	mov	r5, r0
 8002f60:	2900      	cmp	r1, #0
 8002f62:	d045      	beq.n	8002ff0 <_free_r+0x94>
 8002f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f68:	1f0c      	subs	r4, r1, #4
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	bfb8      	it	lt
 8002f6e:	18e4      	addlt	r4, r4, r3
 8002f70:	f000 f8d6 	bl	8003120 <__malloc_lock>
 8002f74:	4a1f      	ldr	r2, [pc, #124]	; (8002ff4 <_free_r+0x98>)
 8002f76:	6813      	ldr	r3, [r2, #0]
 8002f78:	4610      	mov	r0, r2
 8002f7a:	b933      	cbnz	r3, 8002f8a <_free_r+0x2e>
 8002f7c:	6063      	str	r3, [r4, #4]
 8002f7e:	6014      	str	r4, [r2, #0]
 8002f80:	4628      	mov	r0, r5
 8002f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f86:	f000 b8cc 	b.w	8003122 <__malloc_unlock>
 8002f8a:	42a3      	cmp	r3, r4
 8002f8c:	d90c      	bls.n	8002fa8 <_free_r+0x4c>
 8002f8e:	6821      	ldr	r1, [r4, #0]
 8002f90:	1862      	adds	r2, r4, r1
 8002f92:	4293      	cmp	r3, r2
 8002f94:	bf04      	itt	eq
 8002f96:	681a      	ldreq	r2, [r3, #0]
 8002f98:	685b      	ldreq	r3, [r3, #4]
 8002f9a:	6063      	str	r3, [r4, #4]
 8002f9c:	bf04      	itt	eq
 8002f9e:	1852      	addeq	r2, r2, r1
 8002fa0:	6022      	streq	r2, [r4, #0]
 8002fa2:	6004      	str	r4, [r0, #0]
 8002fa4:	e7ec      	b.n	8002f80 <_free_r+0x24>
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	b10a      	cbz	r2, 8002fb0 <_free_r+0x54>
 8002fac:	42a2      	cmp	r2, r4
 8002fae:	d9fa      	bls.n	8002fa6 <_free_r+0x4a>
 8002fb0:	6819      	ldr	r1, [r3, #0]
 8002fb2:	1858      	adds	r0, r3, r1
 8002fb4:	42a0      	cmp	r0, r4
 8002fb6:	d10b      	bne.n	8002fd0 <_free_r+0x74>
 8002fb8:	6820      	ldr	r0, [r4, #0]
 8002fba:	4401      	add	r1, r0
 8002fbc:	1858      	adds	r0, r3, r1
 8002fbe:	4282      	cmp	r2, r0
 8002fc0:	6019      	str	r1, [r3, #0]
 8002fc2:	d1dd      	bne.n	8002f80 <_free_r+0x24>
 8002fc4:	6810      	ldr	r0, [r2, #0]
 8002fc6:	6852      	ldr	r2, [r2, #4]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	4401      	add	r1, r0
 8002fcc:	6019      	str	r1, [r3, #0]
 8002fce:	e7d7      	b.n	8002f80 <_free_r+0x24>
 8002fd0:	d902      	bls.n	8002fd8 <_free_r+0x7c>
 8002fd2:	230c      	movs	r3, #12
 8002fd4:	602b      	str	r3, [r5, #0]
 8002fd6:	e7d3      	b.n	8002f80 <_free_r+0x24>
 8002fd8:	6820      	ldr	r0, [r4, #0]
 8002fda:	1821      	adds	r1, r4, r0
 8002fdc:	428a      	cmp	r2, r1
 8002fde:	bf04      	itt	eq
 8002fe0:	6811      	ldreq	r1, [r2, #0]
 8002fe2:	6852      	ldreq	r2, [r2, #4]
 8002fe4:	6062      	str	r2, [r4, #4]
 8002fe6:	bf04      	itt	eq
 8002fe8:	1809      	addeq	r1, r1, r0
 8002fea:	6021      	streq	r1, [r4, #0]
 8002fec:	605c      	str	r4, [r3, #4]
 8002fee:	e7c7      	b.n	8002f80 <_free_r+0x24>
 8002ff0:	bd38      	pop	{r3, r4, r5, pc}
 8002ff2:	bf00      	nop
 8002ff4:	200000cc 	.word	0x200000cc

08002ff8 <_malloc_r>:
 8002ff8:	b570      	push	{r4, r5, r6, lr}
 8002ffa:	1ccd      	adds	r5, r1, #3
 8002ffc:	f025 0503 	bic.w	r5, r5, #3
 8003000:	3508      	adds	r5, #8
 8003002:	2d0c      	cmp	r5, #12
 8003004:	bf38      	it	cc
 8003006:	250c      	movcc	r5, #12
 8003008:	2d00      	cmp	r5, #0
 800300a:	4606      	mov	r6, r0
 800300c:	db01      	blt.n	8003012 <_malloc_r+0x1a>
 800300e:	42a9      	cmp	r1, r5
 8003010:	d903      	bls.n	800301a <_malloc_r+0x22>
 8003012:	230c      	movs	r3, #12
 8003014:	6033      	str	r3, [r6, #0]
 8003016:	2000      	movs	r0, #0
 8003018:	bd70      	pop	{r4, r5, r6, pc}
 800301a:	f000 f881 	bl	8003120 <__malloc_lock>
 800301e:	4a23      	ldr	r2, [pc, #140]	; (80030ac <_malloc_r+0xb4>)
 8003020:	6814      	ldr	r4, [r2, #0]
 8003022:	4621      	mov	r1, r4
 8003024:	b991      	cbnz	r1, 800304c <_malloc_r+0x54>
 8003026:	4c22      	ldr	r4, [pc, #136]	; (80030b0 <_malloc_r+0xb8>)
 8003028:	6823      	ldr	r3, [r4, #0]
 800302a:	b91b      	cbnz	r3, 8003034 <_malloc_r+0x3c>
 800302c:	4630      	mov	r0, r6
 800302e:	f000 f867 	bl	8003100 <_sbrk_r>
 8003032:	6020      	str	r0, [r4, #0]
 8003034:	4629      	mov	r1, r5
 8003036:	4630      	mov	r0, r6
 8003038:	f000 f862 	bl	8003100 <_sbrk_r>
 800303c:	1c43      	adds	r3, r0, #1
 800303e:	d126      	bne.n	800308e <_malloc_r+0x96>
 8003040:	230c      	movs	r3, #12
 8003042:	6033      	str	r3, [r6, #0]
 8003044:	4630      	mov	r0, r6
 8003046:	f000 f86c 	bl	8003122 <__malloc_unlock>
 800304a:	e7e4      	b.n	8003016 <_malloc_r+0x1e>
 800304c:	680b      	ldr	r3, [r1, #0]
 800304e:	1b5b      	subs	r3, r3, r5
 8003050:	d41a      	bmi.n	8003088 <_malloc_r+0x90>
 8003052:	2b0b      	cmp	r3, #11
 8003054:	d90f      	bls.n	8003076 <_malloc_r+0x7e>
 8003056:	600b      	str	r3, [r1, #0]
 8003058:	50cd      	str	r5, [r1, r3]
 800305a:	18cc      	adds	r4, r1, r3
 800305c:	4630      	mov	r0, r6
 800305e:	f000 f860 	bl	8003122 <__malloc_unlock>
 8003062:	f104 000b 	add.w	r0, r4, #11
 8003066:	1d23      	adds	r3, r4, #4
 8003068:	f020 0007 	bic.w	r0, r0, #7
 800306c:	1ac3      	subs	r3, r0, r3
 800306e:	d01b      	beq.n	80030a8 <_malloc_r+0xb0>
 8003070:	425a      	negs	r2, r3
 8003072:	50e2      	str	r2, [r4, r3]
 8003074:	bd70      	pop	{r4, r5, r6, pc}
 8003076:	428c      	cmp	r4, r1
 8003078:	bf0d      	iteet	eq
 800307a:	6863      	ldreq	r3, [r4, #4]
 800307c:	684b      	ldrne	r3, [r1, #4]
 800307e:	6063      	strne	r3, [r4, #4]
 8003080:	6013      	streq	r3, [r2, #0]
 8003082:	bf18      	it	ne
 8003084:	460c      	movne	r4, r1
 8003086:	e7e9      	b.n	800305c <_malloc_r+0x64>
 8003088:	460c      	mov	r4, r1
 800308a:	6849      	ldr	r1, [r1, #4]
 800308c:	e7ca      	b.n	8003024 <_malloc_r+0x2c>
 800308e:	1cc4      	adds	r4, r0, #3
 8003090:	f024 0403 	bic.w	r4, r4, #3
 8003094:	42a0      	cmp	r0, r4
 8003096:	d005      	beq.n	80030a4 <_malloc_r+0xac>
 8003098:	1a21      	subs	r1, r4, r0
 800309a:	4630      	mov	r0, r6
 800309c:	f000 f830 	bl	8003100 <_sbrk_r>
 80030a0:	3001      	adds	r0, #1
 80030a2:	d0cd      	beq.n	8003040 <_malloc_r+0x48>
 80030a4:	6025      	str	r5, [r4, #0]
 80030a6:	e7d9      	b.n	800305c <_malloc_r+0x64>
 80030a8:	bd70      	pop	{r4, r5, r6, pc}
 80030aa:	bf00      	nop
 80030ac:	200000cc 	.word	0x200000cc
 80030b0:	200000d0 	.word	0x200000d0

080030b4 <_realloc_r>:
 80030b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b6:	4607      	mov	r7, r0
 80030b8:	4614      	mov	r4, r2
 80030ba:	460e      	mov	r6, r1
 80030bc:	b921      	cbnz	r1, 80030c8 <_realloc_r+0x14>
 80030be:	4611      	mov	r1, r2
 80030c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80030c4:	f7ff bf98 	b.w	8002ff8 <_malloc_r>
 80030c8:	b922      	cbnz	r2, 80030d4 <_realloc_r+0x20>
 80030ca:	f7ff ff47 	bl	8002f5c <_free_r>
 80030ce:	4625      	mov	r5, r4
 80030d0:	4628      	mov	r0, r5
 80030d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030d4:	f000 f826 	bl	8003124 <_malloc_usable_size_r>
 80030d8:	4284      	cmp	r4, r0
 80030da:	d90f      	bls.n	80030fc <_realloc_r+0x48>
 80030dc:	4621      	mov	r1, r4
 80030de:	4638      	mov	r0, r7
 80030e0:	f7ff ff8a 	bl	8002ff8 <_malloc_r>
 80030e4:	4605      	mov	r5, r0
 80030e6:	2800      	cmp	r0, #0
 80030e8:	d0f2      	beq.n	80030d0 <_realloc_r+0x1c>
 80030ea:	4631      	mov	r1, r6
 80030ec:	4622      	mov	r2, r4
 80030ee:	f7ff ff0f 	bl	8002f10 <memcpy>
 80030f2:	4631      	mov	r1, r6
 80030f4:	4638      	mov	r0, r7
 80030f6:	f7ff ff31 	bl	8002f5c <_free_r>
 80030fa:	e7e9      	b.n	80030d0 <_realloc_r+0x1c>
 80030fc:	4635      	mov	r5, r6
 80030fe:	e7e7      	b.n	80030d0 <_realloc_r+0x1c>

08003100 <_sbrk_r>:
 8003100:	b538      	push	{r3, r4, r5, lr}
 8003102:	4c06      	ldr	r4, [pc, #24]	; (800311c <_sbrk_r+0x1c>)
 8003104:	2300      	movs	r3, #0
 8003106:	4605      	mov	r5, r0
 8003108:	4608      	mov	r0, r1
 800310a:	6023      	str	r3, [r4, #0]
 800310c:	f000 f814 	bl	8003138 <_sbrk>
 8003110:	1c43      	adds	r3, r0, #1
 8003112:	d102      	bne.n	800311a <_sbrk_r+0x1a>
 8003114:	6823      	ldr	r3, [r4, #0]
 8003116:	b103      	cbz	r3, 800311a <_sbrk_r+0x1a>
 8003118:	602b      	str	r3, [r5, #0]
 800311a:	bd38      	pop	{r3, r4, r5, pc}
 800311c:	20000234 	.word	0x20000234

08003120 <__malloc_lock>:
 8003120:	4770      	bx	lr

08003122 <__malloc_unlock>:
 8003122:	4770      	bx	lr

08003124 <_malloc_usable_size_r>:
 8003124:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003128:	2800      	cmp	r0, #0
 800312a:	f1a0 0004 	sub.w	r0, r0, #4
 800312e:	bfbc      	itt	lt
 8003130:	580b      	ldrlt	r3, [r1, r0]
 8003132:	18c0      	addlt	r0, r0, r3
 8003134:	4770      	bx	lr
	...

08003138 <_sbrk>:
 8003138:	4b04      	ldr	r3, [pc, #16]	; (800314c <_sbrk+0x14>)
 800313a:	6819      	ldr	r1, [r3, #0]
 800313c:	4602      	mov	r2, r0
 800313e:	b909      	cbnz	r1, 8003144 <_sbrk+0xc>
 8003140:	4903      	ldr	r1, [pc, #12]	; (8003150 <_sbrk+0x18>)
 8003142:	6019      	str	r1, [r3, #0]
 8003144:	6818      	ldr	r0, [r3, #0]
 8003146:	4402      	add	r2, r0
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	4770      	bx	lr
 800314c:	200000d4 	.word	0x200000d4
 8003150:	20000238 	.word	0x20000238

08003154 <_init>:
 8003154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003156:	bf00      	nop
 8003158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800315a:	bc08      	pop	{r3}
 800315c:	469e      	mov	lr, r3
 800315e:	4770      	bx	lr

08003160 <_fini>:
 8003160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003162:	bf00      	nop
 8003164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003166:	bc08      	pop	{r3}
 8003168:	469e      	mov	lr, r3
 800316a:	4770      	bx	lr
